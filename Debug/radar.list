
radar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800515c  0800515c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005164  08005164  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005168  08005168  00015168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800516c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08005178  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08005178  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d77c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eaa  00000000  00000000  0002d7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0002f6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d5  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015b10  00000000  00000000  00030d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e5d5  00000000  00000000  00046815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008dec7  00000000  00000000  00054dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035d8  00000000  00000000  000e2cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e628c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005124 	.word	0x08005124

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08005124 	.word	0x08005124

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b970 	b.w	8000cac <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	460d      	mov	r5, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	460f      	mov	r7, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4694      	mov	ip, r2
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0xe2>
 80009fa:	fab2 f382 	clz	r3, r2
 80009fe:	b143      	cbz	r3, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a04:	f1c3 0220 	rsb	r2, r3, #32
 8000a08:	409f      	lsls	r7, r3
 8000a0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	409c      	lsls	r4, r3
 8000a12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a16:	fa1f f58c 	uxth.w	r5, ip
 8000a1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a1e:	0c22      	lsrs	r2, r4, #16
 8000a20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a28:	fb01 f005 	mul.w	r0, r1, r5
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a30:	eb1c 0202 	adds.w	r2, ip, r2
 8000a34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a38:	f080 811c 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	f240 8119 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a42:	3902      	subs	r1, #2
 8000a44:	4462      	add	r2, ip
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	b2a4      	uxth	r4, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a56:	fb00 f505 	mul.w	r5, r0, r5
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x90>
 8000a5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a66:	f080 8107 	bcs.w	8000c78 <__udivmoddi4+0x294>
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	f240 8104 	bls.w	8000c78 <__udivmoddi4+0x294>
 8000a70:	4464      	add	r4, ip
 8000a72:	3802      	subs	r0, #2
 8000a74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11e      	cbz	r6, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40dc      	lsrs	r4, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	e9c6 4300 	strd	r4, r3, [r6]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0xbc>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80ed 	beq.w	8000c6e <__udivmoddi4+0x28a>
 8000a94:	2100      	movs	r1, #0
 8000a96:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa0:	fab3 f183 	clz	r1, r3
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d149      	bne.n	8000b3c <__udivmoddi4+0x158>
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d302      	bcc.n	8000ab2 <__udivmoddi4+0xce>
 8000aac:	4282      	cmp	r2, r0
 8000aae:	f200 80f8 	bhi.w	8000ca2 <__udivmoddi4+0x2be>
 8000ab2:	1a84      	subs	r4, r0, r2
 8000ab4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4617      	mov	r7, r2
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d0e2      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac4:	e7df      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac6:	b902      	cbnz	r2, 8000aca <__udivmoddi4+0xe6>
 8000ac8:	deff      	udf	#255	; 0xff
 8000aca:	fab2 f382 	clz	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8090 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ae8:	0c22      	lsrs	r2, r4, #16
 8000aea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aee:	fb0e f005 	mul.w	r0, lr, r5
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af6:	eb1c 0202 	adds.w	r2, ip, r2
 8000afa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4290      	cmp	r0, r2
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2b8>
 8000b06:	4645      	mov	r5, r8
 8000b08:	1a12      	subs	r2, r2, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b10:	fb07 2210 	mls	r2, r7, r0, r2
 8000b14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x14e>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x14c>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2c2>
 8000b30:	4610      	mov	r0, r2
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3a:	e79f      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b3c:	f1c1 0720 	rsb	r7, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b52:	40fd      	lsrs	r5, r7
 8000b54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b5e:	fa1f fe8c 	uxth.w	lr, ip
 8000b62:	fb09 5518 	mls	r5, r9, r8, r5
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	fa02 f201 	lsl.w	r2, r2, r1
 8000b76:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2b4>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2b4>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4464      	add	r4, ip
 8000b94:	1b64      	subs	r4, r4, r5
 8000b96:	b29d      	uxth	r5, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2ac>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2ac>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bc6:	eba4 040e 	sub.w	r4, r4, lr
 8000bca:	42ac      	cmp	r4, r5
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46ae      	mov	lr, r5
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x29c>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x298>
 8000bd4:	b156      	cbz	r6, 8000bec <__udivmoddi4+0x208>
 8000bd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bda:	eb64 040e 	sbc.w	r4, r4, lr
 8000bde:	fa04 f707 	lsl.w	r7, r4, r7
 8000be2:	40ca      	lsrs	r2, r1
 8000be4:	40cc      	lsrs	r4, r1
 8000be6:	4317      	orrs	r7, r2
 8000be8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	f1c3 0120 	rsb	r1, r3, #32
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000c00:	fa25 f101 	lsr.w	r1, r5, r1
 8000c04:	409d      	lsls	r5, r3
 8000c06:	432a      	orrs	r2, r5
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1510 	mls	r5, r7, r0, r1
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c22:	428d      	cmp	r5, r1
 8000c24:	fa04 f403 	lsl.w	r4, r4, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x258>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c34:	428d      	cmp	r5, r1
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1b49      	subs	r1, r1, r5
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c44:	fb07 1115 	mls	r1, r7, r5, r1
 8000c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x282>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000c62:	3d02      	subs	r5, #2
 8000c64:	4462      	add	r2, ip
 8000c66:	1a52      	subs	r2, r2, r1
 8000c68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0xfc>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4630      	mov	r0, r6
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000c74:	4639      	mov	r1, r7
 8000c76:	e6e6      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	e6fb      	b.n	8000a74 <__udivmoddi4+0x90>
 8000c7c:	4548      	cmp	r0, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x282>
 8000c90:	462b      	mov	r3, r5
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x258>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9c:	3d02      	subs	r5, #2
 8000c9e:	4462      	add	r2, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e70a      	b.n	8000abc <__udivmoddi4+0xd8>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x14e>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	69b9      	ldr	r1, [r7, #24]
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	fb03 f202 	mul.w	r2, r3, r2
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	fb92 f2f3 	sdiv	r2, r2, r3
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4413      	add	r3, r2
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <delayUs>:

void delayUs(uint16_t time){
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	htim11.Instance -> CNT = 0;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <delayUs+0x30>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim11.Instance -> CNT < time);
 8000cfa:	bf00      	nop
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <delayUs+0x30>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3f9      	bcc.n	8000cfc <delayUs+0x14>
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200000b8 	.word	0x200000b8
 8000d1c:	00000000 	.word	0x00000000

08000d20 <HAL_TIM_IC_CaptureCallback>:
uint32_t IC_Val2 = 0;
uint32_t Difference = 0;
uint8_t IsFirstCaptured = 0;
uint32_t Distance = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7f1b      	ldrb	r3, [r3, #28]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	f040 8082 	bne.w	8000e36 <HAL_TIM_IC_CaptureCallback+0x116>
		if(IsFirstCaptured == 0){
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11a      	bne.n	8000d70 <HAL_TIM_IC_CaptureCallback+0x50>
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f002 fc1b 	bl	8003578 <HAL_TIM_ReadCapturedValue>
 8000d42:	4603      	mov	r3, r0
 8000d44:	4a41      	ldr	r2, [pc, #260]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d46:	6013      	str	r3, [r2, #0]
			IsFirstCaptured = 1;
 8000d48:	4b3f      	ldr	r3, [pc, #252]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6a1a      	ldr	r2, [r3, #32]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f022 020a 	bic.w	r2, r2, #10
 8000d5c:	621a      	str	r2, [r3, #32]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	6a1a      	ldr	r2, [r3, #32]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0202 	orr.w	r2, r2, #2
 8000d6c:	621a      	str	r2, [r3, #32]
			IsFirstCaptured = 0;
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
		}
	}
}
 8000d6e:	e062      	b.n	8000e36 <HAL_TIM_IC_CaptureCallback+0x116>
		else if(IsFirstCaptured == 1){
 8000d70:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d15e      	bne.n	8000e36 <HAL_TIM_IC_CaptureCallback+0x116>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f002 fbfc 	bl	8003578 <HAL_TIM_ReadCapturedValue>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a33      	ldr	r2, [pc, #204]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d84:	6013      	str	r3, [r2, #0]
			htim->Instance->CNT = 0;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
			if(IC_Val2 > IC_Val1) Difference = IC_Val2 - IC_Val1;
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d907      	bls.n	8000daa <HAL_TIM_IC_CaptureCallback+0x8a>
 8000d9a:	4b2d      	ldr	r3, [pc, #180]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	4a2b      	ldr	r2, [pc, #172]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	e00f      	b.n	8000dca <HAL_TIM_IC_CaptureCallback+0xaa>
			else if(IC_Val1 > IC_Val2) Difference = (0xffff - IC_Val1) + IC_Val2;
 8000daa:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	4b28      	ldr	r3, [pc, #160]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d909      	bls.n	8000dca <HAL_TIM_IC_CaptureCallback+0xaa>
 8000db6:	4b26      	ldr	r3, [pc, #152]	; (8000e50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b24      	ldr	r3, [pc, #144]	; (8000e4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000dc4:	33ff      	adds	r3, #255	; 0xff
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dc8:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.034 / 2;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fb44 	bl	800045c <__aeabi_ui2d>
 8000dd4:	a31a      	add	r3, pc, #104	; (adr r3, 8000e40 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dda:	f7ff fbb9 	bl	8000550 <__aeabi_dmul>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 0200 	mov.w	r2, #0
 8000dea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dee:	f7ff fcd9 	bl	80007a4 <__aeabi_ddiv>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fdbb 	bl	8000974 <__aeabi_d2uiz>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e02:	6013      	str	r3, [r2, #0]
			IsFirstCaptured = 0;
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	6a1a      	ldr	r2, [r3, #32]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f022 020a 	bic.w	r2, r2, #10
 8000e18:	621a      	str	r2, [r3, #32]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6a12      	ldr	r2, [r2, #32]
 8000e24:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 0202 	bic.w	r2, r2, #2
 8000e34:	60da      	str	r2, [r3, #12]
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	b020c49c 	.word	0xb020c49c
 8000e44:	3fa16872 	.word	0x3fa16872
 8000e48:	20000154 	.word	0x20000154
 8000e4c:	20000148 	.word	0x20000148
 8000e50:	2000014c 	.word	0x2000014c
 8000e54:	20000150 	.word	0x20000150
 8000e58:	20000158 	.word	0x20000158

08000e5c <getDistance>:

uint32_t getDistance(){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2120      	movs	r1, #32
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <getDistance+0x38>)
 8000e66:	f001 f8d7 	bl	8002018 <HAL_GPIO_WritePin>
	delayUs(10);
 8000e6a:	200a      	movs	r0, #10
 8000e6c:	f7ff ff3c 	bl	8000ce8 <delayUs>
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2120      	movs	r1, #32
 8000e74:	4807      	ldr	r0, [pc, #28]	; (8000e94 <getDistance+0x38>)
 8000e76:	f001 f8cf 	bl	8002018 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <getDistance+0x3c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <getDistance+0x3c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0202 	orr.w	r2, r2, #2
 8000e88:	60da      	str	r2, [r3, #12]
	return Distance;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <getDistance+0x40>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020000 	.word	0x40020000
 8000e98:	20000070 	.word	0x20000070
 8000e9c:	20000158 	.word	0x20000158

08000ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea6:	f000 fd1d 	bl	80018e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eaa:	f000 f841 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eae:	f000 f9fd 	bl	80012ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f89b 	bl	8000fec <MX_TIM1_Init>
  MX_TIM3_Init();
 8000eb6:	f000 f93b 	bl	8001130 <MX_TIM3_Init>
  MX_TIM11_Init();
 8000eba:	f000 f9a9 	bl	8001210 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000ebe:	f000 f9cb 	bl	8001258 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initUart(&huart2);
 8000ec2:	4817      	ldr	r0, [pc, #92]	; (8000f20 <main+0x80>)
 8000ec4:	f000 fba8 	bl	8001618 <initUart>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <main+0x84>)
 8000ecc:	f001 fe1a 	bl	8002b04 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4815      	ldr	r0, [pc, #84]	; (8000f28 <main+0x88>)
 8000ed4:	f001 ff20 	bl	8002d18 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start(&htim11);
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <main+0x8c>)
 8000eda:	f001 fd5f 	bl	800299c <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	protocol_t txData, rxData;
  	rxData = receivePacket();
 8000ede:	f000 fc5b 	bl	8001798 <receivePacket>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	603b      	str	r3, [r7, #0]
  	if(rxData.command == 'R'){
 8000ee6:	783b      	ldrb	r3, [r7, #0]
 8000ee8:	2b52      	cmp	r3, #82	; 0x52
 8000eea:	d1f8      	bne.n	8000ede <main+0x3e>
  		htim1.Instance->CCR1 = map(rxData.data, 0, 180, 500, 2300);
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000efa:	22b4      	movs	r2, #180	; 0xb4
 8000efc:	2100      	movs	r1, #0
 8000efe:	f7ff fed7 	bl	8000cb0 <map>
 8000f02:	4602      	mov	r2, r0
 8000f04:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <main+0x84>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
  		txData.command = 'A';
 8000f0a:	2341      	movs	r3, #65	; 0x41
 8000f0c:	713b      	strb	r3, [r7, #4]
  		txData.data = getDistance();
 8000f0e:	f7ff ffa5 	bl	8000e5c <getDistance>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	80fb      	strh	r3, [r7, #6]
  		transmitPacket(txData);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f000 fbf7 	bl	800170c <transmitPacket>
  {
 8000f1e:	e7de      	b.n	8000ede <main+0x3e>
 8000f20:	20000100 	.word	0x20000100
 8000f24:	20000028 	.word	0x20000028
 8000f28:	20000070 	.word	0x20000070
 8000f2c:	200000b8 	.word	0x200000b8

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	; 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	; 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 f8c4 	bl	80050cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	4b22      	ldr	r3, [pc, #136]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	; 0x40
 8000f64:	4b1f      	ldr	r3, [pc, #124]	; (8000fe4 <SystemClock_Config+0xb4>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <SystemClock_Config+0xb8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f90:	2301      	movs	r3, #1
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f94:	2310      	movs	r3, #16
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 f853 	bl	800204c <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000fac:	f000 f9b0 	bl	8001310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f001 fab6 	bl	800253c <HAL_RCC_ClockConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000fd6:	f000 f99b 	bl	8001310 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3750      	adds	r7, #80	; 0x50
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b096      	sub	sp, #88	; 0x58
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]
 800101c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2220      	movs	r2, #32
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f004 f851 	bl	80050cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800102a:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <MX_TIM1_Init+0x13c>)
 800102c:	4a3f      	ldr	r2, [pc, #252]	; (800112c <MX_TIM1_Init+0x140>)
 800102e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001030:	4b3d      	ldr	r3, [pc, #244]	; (8001128 <MX_TIM1_Init+0x13c>)
 8001032:	220f      	movs	r2, #15
 8001034:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	4b3c      	ldr	r3, [pc, #240]	; (8001128 <MX_TIM1_Init+0x13c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 800103c:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <MX_TIM1_Init+0x13c>)
 800103e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001042:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001044:	4b38      	ldr	r3, [pc, #224]	; (8001128 <MX_TIM1_Init+0x13c>)
 8001046:	2200      	movs	r2, #0
 8001048:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <MX_TIM1_Init+0x13c>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001050:	4b35      	ldr	r3, [pc, #212]	; (8001128 <MX_TIM1_Init+0x13c>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001056:	4834      	ldr	r0, [pc, #208]	; (8001128 <MX_TIM1_Init+0x13c>)
 8001058:	f001 fc50 	bl	80028fc <HAL_TIM_Base_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001062:	f000 f955 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800106c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001070:	4619      	mov	r1, r3
 8001072:	482d      	ldr	r0, [pc, #180]	; (8001128 <MX_TIM1_Init+0x13c>)
 8001074:	f002 f9b8 	bl	80033e8 <HAL_TIM_ConfigClockSource>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800107e:	f000 f947 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001082:	4829      	ldr	r0, [pc, #164]	; (8001128 <MX_TIM1_Init+0x13c>)
 8001084:	f001 fce4 	bl	8002a50 <HAL_TIM_PWM_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800108e:	f000 f93f 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800109a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800109e:	4619      	mov	r1, r3
 80010a0:	4821      	ldr	r0, [pc, #132]	; (8001128 <MX_TIM1_Init+0x13c>)
 80010a2:	f002 fecb 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80010ac:	f000 f930 	bl	8001310 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b0:	2360      	movs	r3, #96	; 0x60
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1500-1;
 80010b4:	f240 53db 	movw	r3, #1499	; 0x5db
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	4814      	ldr	r0, [pc, #80]	; (8001128 <MX_TIM1_Init+0x13c>)
 80010d8:	f002 f8c4 	bl	8003264 <HAL_TIM_PWM_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80010e2:	f000 f915 	bl	8001310 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <MX_TIM1_Init+0x13c>)
 800110a:	f002 ff05 	bl	8003f18 <HAL_TIMEx_ConfigBreakDeadTime>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001114:	f000 f8fc 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001118:	4803      	ldr	r0, [pc, #12]	; (8001128 <MX_TIM1_Init+0x13c>)
 800111a:	f000 f9a3 	bl	8001464 <HAL_TIM_MspPostInit>

}
 800111e:	bf00      	nop
 8001120:	3758      	adds	r7, #88	; 0x58
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000028 	.word	0x20000028
 800112c:	40010000 	.word	0x40010000

08001130 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0318 	add.w	r3, r7, #24
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <MX_TIM3_Init+0xd8>)
 800115c:	4a2b      	ldr	r2, [pc, #172]	; (800120c <MX_TIM3_Init+0xdc>)
 800115e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8001160:	4b29      	ldr	r3, [pc, #164]	; (8001208 <MX_TIM3_Init+0xd8>)
 8001162:	220f      	movs	r2, #15
 8001164:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <MX_TIM3_Init+0xd8>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800116c:	4b26      	ldr	r3, [pc, #152]	; (8001208 <MX_TIM3_Init+0xd8>)
 800116e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001172:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <MX_TIM3_Init+0xd8>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117a:	4b23      	ldr	r3, [pc, #140]	; (8001208 <MX_TIM3_Init+0xd8>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001180:	4821      	ldr	r0, [pc, #132]	; (8001208 <MX_TIM3_Init+0xd8>)
 8001182:	f001 fbbb 	bl	80028fc <HAL_TIM_Base_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 800118c:	f000 f8c0 	bl	8001310 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001194:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001196:	f107 0318 	add.w	r3, r7, #24
 800119a:	4619      	mov	r1, r3
 800119c:	481a      	ldr	r0, [pc, #104]	; (8001208 <MX_TIM3_Init+0xd8>)
 800119e:	f002 f923 	bl	80033e8 <HAL_TIM_ConfigClockSource>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011a8:	f000 f8b2 	bl	8001310 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_TIM3_Init+0xd8>)
 80011ae:	f001 fd59 	bl	8002c64 <HAL_TIM_IC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011b8:	f000 f8aa 	bl	8001310 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	480f      	ldr	r0, [pc, #60]	; (8001208 <MX_TIM3_Init+0xd8>)
 80011cc:	f002 fe36 	bl	8003e3c <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80011d6:	f000 f89b 	bl	8001310 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_TIM3_Init+0xd8>)
 80011f2:	f001 ff9b 	bl	800312c <HAL_TIM_IC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80011fc:	f000 f888 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000070 	.word	0x20000070
 800120c:	40000400 	.word	0x40000400

08001210 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_TIM11_Init+0x40>)
 8001216:	4a0f      	ldr	r2, [pc, #60]	; (8001254 <MX_TIM11_Init+0x44>)
 8001218:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16-1;
 800121a:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <MX_TIM11_Init+0x40>)
 800121c:	220f      	movs	r2, #15
 800121e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_TIM11_Init+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <MX_TIM11_Init+0x40>)
 8001228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800122c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_TIM11_Init+0x40>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_TIM11_Init+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_TIM11_Init+0x40>)
 800123c:	f001 fb5e 	bl	80028fc <HAL_TIM_Base_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001246:	f000 f863 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200000b8 	.word	0x200000b8
 8001254:	40014800 	.word	0x40014800

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800125e:	4a12      	ldr	r2, [pc, #72]	; (80012a8 <MX_USART2_UART_Init+0x50>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART2_UART_Init+0x4c>)
 8001290:	f002 fea8 	bl	8003fe4 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800129a:	f000 f839 	bl	8001310 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000100 	.word	0x20000100
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_GPIO_Init+0x5c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a0f      	ldr	r2, [pc, #60]	; (8001308 <MX_GPIO_Init+0x5c>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_GPIO_Init+0x5c>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2120      	movs	r1, #32
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <MX_GPIO_Init+0x60>)
 80012e2:	f000 fe99 	bl	8002018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : trigger_Pin */
  GPIO_InitStruct.Pin = trigger_Pin;
 80012e6:	2320      	movs	r3, #32
 80012e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(trigger_GPIO_Port, &GPIO_InitStruct);
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_GPIO_Init+0x60>)
 80012fc:	f000 fd08 	bl	8001d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000

08001310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001314:	b672      	cpsid	i
}
 8001316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001318:	e7fe      	b.n	8001318 <Error_Handler+0x8>
	...

0800131c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a0f      	ldr	r2, [pc, #60]	; (8001368 <HAL_MspInit+0x4c>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_MspInit+0x4c>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x4c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x4c>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08c      	sub	sp, #48	; 0x30
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a31      	ldr	r2, [pc, #196]	; (8001450 <HAL_TIM_Base_MspInit+0xe4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10e      	bne.n	80013ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
 80013a8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80013aa:	e04c      	b.n	8001446 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM3)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a29      	ldr	r2, [pc, #164]	; (8001458 <HAL_TIM_Base_MspInit+0xec>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d134      	bne.n	8001420 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a25      	ldr	r2, [pc, #148]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = echo_Pin;
 80013ee:	2340      	movs	r3, #64	; 0x40
 80013f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013fe:	2302      	movs	r3, #2
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(echo_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4814      	ldr	r0, [pc, #80]	; (800145c <HAL_TIM_Base_MspInit+0xf0>)
 800140a:	f000 fc81 	bl	8001d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	201d      	movs	r0, #29
 8001414:	f000 fbb3 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001418:	201d      	movs	r0, #29
 800141a:	f000 fbcc 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 800141e:	e012      	b.n	8001446 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM11)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <HAL_TIM_Base_MspInit+0xf4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10d      	bne.n	8001446 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 8001434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_TIM_Base_MspInit+0xe8>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
}
 8001446:	bf00      	nop
 8001448:	3730      	adds	r7, #48	; 0x30
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40010000 	.word	0x40010000
 8001454:	40023800 	.word	0x40023800
 8001458:	40000400 	.word	0x40000400
 800145c:	40020000 	.word	0x40020000
 8001460:	40014800 	.word	0x40014800

08001464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a12      	ldr	r2, [pc, #72]	; (80014cc <HAL_TIM_MspPostInit+0x68>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d11e      	bne.n	80014c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_TIM_MspPostInit+0x6c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a10      	ldr	r2, [pc, #64]	; (80014d0 <HAL_TIM_MspPostInit+0x6c>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <HAL_TIM_MspPostInit+0x6c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = servo_Pin;
 80014a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a8:	2302      	movs	r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(servo_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_TIM_MspPostInit+0x70>)
 80014c0:	f000 fc26 	bl	8001d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40010000 	.word	0x40010000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <HAL_UART_MspInit+0x94>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d133      	bne.n	8001562 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <HAL_UART_MspInit+0x98>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <HAL_UART_MspInit+0x98>)
 8001504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_UART_MspInit+0x98>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_UART_MspInit+0x98>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a14      	ldr	r2, [pc, #80]	; (8001570 <HAL_UART_MspInit+0x98>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_UART_MspInit+0x98>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001532:	230c      	movs	r3, #12
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001542:	2307      	movs	r3, #7
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4809      	ldr	r0, [pc, #36]	; (8001574 <HAL_UART_MspInit+0x9c>)
 800154e:	f000 fbdf 	bl	8001d10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2026      	movs	r0, #38	; 0x26
 8001558:	f000 fb11 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800155c:	2026      	movs	r0, #38	; 0x26
 800155e:	f000 fb2a 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40004400 	.word	0x40004400
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000

08001578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800157c:	e7fe      	b.n	800157c <NMI_Handler+0x4>

0800157e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler+0x4>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <MemManage_Handler+0x4>

0800158a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <UsageFault_Handler+0x4>

08001596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c4:	f000 f9e0 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM3_IRQHandler+0x10>)
 80015d2:	f001 fcbb 	bl	8002f4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000070 	.word	0x20000070

080015e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <USART2_IRQHandler+0x10>)
 80015e6:	f002 fdfd 	bl	80041e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000100 	.word	0x20000100

080015f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	; (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <initUart>:
int rxBufferPp; //put pointer (write)
uint8_t rxBuffer[rxBufferMax];
uint8_t rxChar;

// init device
void initUart(UART_HandleTypeDef *inHuart){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	myHuart = inHuart;
 8001620:	4a06      	ldr	r2, [pc, #24]	; (800163c <initUart+0x24>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <initUart+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2201      	movs	r2, #1
 800162c:	4904      	ldr	r1, [pc, #16]	; (8001640 <initUart+0x28>)
 800162e:	4618      	mov	r0, r3
 8001630:	f002 fdb3 	bl	800419a <HAL_UART_Receive_IT>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000015c 	.word	0x2000015c
 8001640:	20000267 	.word	0x20000267

08001644 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	rxBuffer[rxBufferPp++] = rxChar;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_UART_RxCpltCallback+0x50>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	4910      	ldr	r1, [pc, #64]	; (8001694 <HAL_UART_RxCpltCallback+0x50>)
 8001654:	600a      	str	r2, [r1, #0]
 8001656:	4a10      	ldr	r2, [pc, #64]	; (8001698 <HAL_UART_RxCpltCallback+0x54>)
 8001658:	7811      	ldrb	r1, [r2, #0]
 800165a:	4a10      	ldr	r2, [pc, #64]	; (800169c <HAL_UART_RxCpltCallback+0x58>)
 800165c:	54d1      	strb	r1, [r2, r3]
	rxBufferPp %= rxBufferMax;
 800165e:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_UART_RxCpltCallback+0x50>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_UART_RxCpltCallback+0x5c>)
 8001664:	fb83 1302 	smull	r1, r3, r3, r2
 8001668:	4413      	add	r3, r2
 800166a:	11d9      	asrs	r1, r3, #7
 800166c:	17d3      	asrs	r3, r2, #31
 800166e:	1ac9      	subs	r1, r1, r3
 8001670:	460b      	mov	r3, r1
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	1a5b      	subs	r3, r3, r1
 8001676:	1ad1      	subs	r1, r2, r3
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_UART_RxCpltCallback+0x50>)
 800167a:	6019      	str	r1, [r3, #0]
	HAL_UART_Receive_IT(myHuart, &rxChar, 1);
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_UART_RxCpltCallback+0x60>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2201      	movs	r2, #1
 8001682:	4905      	ldr	r1, [pc, #20]	; (8001698 <HAL_UART_RxCpltCallback+0x54>)
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fd88 	bl	800419a <HAL_UART_Receive_IT>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000164 	.word	0x20000164
 8001698:	20000267 	.word	0x20000267
 800169c:	20000168 	.word	0x20000168
 80016a0:	80808081 	.word	0x80808081
 80016a4:	2000015c 	.word	0x2000015c

080016a8 <getChar>:

uint16_t getChar(){
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
	int16_t result;
	if(rxBufferGp == rxBufferPp) return -1;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <getChar+0x54>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <getChar+0x58>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d102      	bne.n	80016c0 <getChar+0x18>
 80016ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016be:	e017      	b.n	80016f0 <getChar+0x48>
	result = rxBuffer[rxBufferGp++];
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <getChar+0x54>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <getChar+0x54>)
 80016c8:	600a      	str	r2, [r1, #0]
 80016ca:	4a0e      	ldr	r2, [pc, #56]	; (8001704 <getChar+0x5c>)
 80016cc:	5cd3      	ldrb	r3, [r2, r3]
 80016ce:	80fb      	strh	r3, [r7, #6]
	rxBufferGp %= rxBufferMax;
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <getChar+0x54>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <getChar+0x60>)
 80016d6:	fb83 1302 	smull	r1, r3, r3, r2
 80016da:	4413      	add	r3, r2
 80016dc:	11d9      	asrs	r1, r3, #7
 80016de:	17d3      	asrs	r3, r2, #31
 80016e0:	1ac9      	subs	r1, r1, r3
 80016e2:	460b      	mov	r3, r1
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	1a5b      	subs	r3, r3, r1
 80016e8:	1ad1      	subs	r1, r2, r3
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <getChar+0x54>)
 80016ec:	6019      	str	r1, [r3, #0]
	return result;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	20000160 	.word	0x20000160
 8001700:	20000164 	.word	0x20000164
 8001704:	20000168 	.word	0x20000168
 8001708:	80808081 	.word	0x80808081

0800170c <transmitPacket>:
	HAL_UART_Transmit(myHuart, p, len, 10);
	return len;
}

//packet transmit
void transmitPacket(protocol_t data) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	//ready
	uint8_t txBuffer[] = {STX, 0, 0, 0, 0, ETX};
 8001714:	4a1e      	ldr	r2, [pc, #120]	; (8001790 <transmitPacket+0x84>)
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800171e:	6018      	str	r0, [r3, #0]
 8001720:	3304      	adds	r3, #4
 8001722:	8019      	strh	r1, [r3, #0]
	txBuffer[1] = data.command;
 8001724:	793b      	ldrb	r3, [r7, #4]
 8001726:	727b      	strb	r3, [r7, #9]
	txBuffer[2] = (data.data >> 7) | 0x00;
 8001728:	88fb      	ldrh	r3, [r7, #6]
 800172a:	09db      	lsrs	r3, r3, #7
 800172c:	b29b      	uxth	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	72bb      	strb	r3, [r7, #10]
	txBuffer[3] = (data.data & 0x7f) | 0x00;
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800173a:	b2db      	uxtb	r3, r3
 800173c:	72fb      	strb	r3, [r7, #11]
	//CRC calculate
	txBuffer[4] = txBuffer[0] + txBuffer[1] + txBuffer[2] + txBuffer[3];
 800173e:	7a3a      	ldrb	r2, [r7, #8]
 8001740:	7a7b      	ldrb	r3, [r7, #9]
 8001742:	4413      	add	r3, r2
 8001744:	b2da      	uxtb	r2, r3
 8001746:	7abb      	ldrb	r3, [r7, #10]
 8001748:	4413      	add	r3, r2
 800174a:	b2da      	uxtb	r2, r3
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	4413      	add	r3, r2
 8001750:	b2db      	uxtb	r3, r3
 8001752:	733b      	strb	r3, [r7, #12]
	//send data
	HAL_UART_Transmit(myHuart, txBuffer, sizeof(txBuffer), 1);
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <transmitPacket+0x88>)
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	f107 0108 	add.w	r1, r7, #8
 800175c:	2301      	movs	r3, #1
 800175e:	2206      	movs	r2, #6
 8001760:	f002 fc90 	bl	8004084 <HAL_UART_Transmit>
	//ready to finish data sending
	while(HAL_UART_GetState(myHuart) == HAL_UART_STATE_BUSY_TX
 8001764:	bf00      	nop
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <transmitPacket+0x88>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f002 ffec 	bl	8004748 <HAL_UART_GetState>
 8001770:	4603      	mov	r3, r0
			||HAL_UART_GetState(myHuart) == HAL_UART_STATE_BUSY_TX_RX);
 8001772:	2b21      	cmp	r3, #33	; 0x21
 8001774:	d0f7      	beq.n	8001766 <transmitPacket+0x5a>
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <transmitPacket+0x88>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f002 ffe4 	bl	8004748 <HAL_UART_GetState>
 8001780:	4603      	mov	r3, r0
 8001782:	2b23      	cmp	r3, #35	; 0x23
 8001784:	d0ef      	beq.n	8001766 <transmitPacket+0x5a>
}
 8001786:	bf00      	nop
 8001788:	bf00      	nop
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	0800513c 	.word	0x0800513c
 8001794:	2000015c 	.word	0x2000015c

08001798 <receivePacket>:

//packet receive
protocol_t receivePacket(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0
	protocol_t result;
	uint8_t buffer[6];
	uint8_t count = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	77fb      	strb	r3, [r7, #31]
	uint32_t timeout;

	int16_t ch = getChar();
 80017a2:	f7ff ff81 	bl	80016a8 <getChar>
 80017a6:	4603      	mov	r3, r0
 80017a8:	83bb      	strh	r3, [r7, #28]
	memset(&result, 0, sizeof(buffer));
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	2206      	movs	r2, #6
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f003 fc8a 	bl	80050cc <memset>
	if(ch == STX){
 80017b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d159      	bne.n	8001874 <receivePacket+0xdc>
		buffer[count++] = ch;
 80017c0:	7ffb      	ldrb	r3, [r7, #31]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	77fa      	strb	r2, [r7, #31]
 80017c6:	8bba      	ldrh	r2, [r7, #28]
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	3320      	adds	r3, #32
 80017cc:	443b      	add	r3, r7
 80017ce:	f803 2c20 	strb.w	r2, [r3, #-32]
		timeout = HAL_GetTick(); //timeout start
 80017d2:	f000 f8ed 	bl	80019b0 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]
		while(ch != ETX){
 80017d8:	e01b      	b.n	8001812 <receivePacket+0x7a>
			ch = getChar();
 80017da:	f7ff ff65 	bl	80016a8 <getChar>
 80017de:	4603      	mov	r3, r0
 80017e0:	83bb      	strh	r3, [r7, #28]
			if(ch != -1){
 80017e2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ea:	d008      	beq.n	80017fe <receivePacket+0x66>
				buffer[count++] = ch;
 80017ec:	7ffb      	ldrb	r3, [r7, #31]
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	77fa      	strb	r2, [r7, #31]
 80017f2:	8bba      	ldrh	r2, [r7, #28]
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	3320      	adds	r3, #32
 80017f8:	443b      	add	r3, r7
 80017fa:	f803 2c20 	strb.w	r2, [r3, #-32]
			}
			//timeout calculate
			if(HAL_GetTick() - timeout >= 2) return result;
 80017fe:	f000 f8d7 	bl	80019b0 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d902      	bls.n	8001812 <receivePacket+0x7a>
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	e032      	b.n	8001878 <receivePacket+0xe0>
		while(ch != ETX){
 8001812:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001816:	2b03      	cmp	r3, #3
 8001818:	d1df      	bne.n	80017da <receivePacket+0x42>
		}
		//CRC check
		uint8_t crc = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	76fb      	strb	r3, [r7, #27]
		for(int i = 0; i < 4; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e009      	b.n	8001838 <receivePacket+0xa0>
			crc += buffer[i];
 8001824:	463a      	mov	r2, r7
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4413      	add	r3, r2
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	7efb      	ldrb	r3, [r7, #27]
 800182e:	4413      	add	r3, r2
 8001830:	76fb      	strb	r3, [r7, #27]
		for(int i = 0; i < 4; i++)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	2b03      	cmp	r3, #3
 800183c:	ddf2      	ble.n	8001824 <receivePacket+0x8c>
		if(crc != buffer[4]) return result;
 800183e:	793b      	ldrb	r3, [r7, #4]
 8001840:	7efa      	ldrb	r2, [r7, #27]
 8001842:	429a      	cmp	r2, r3
 8001844:	d002      	beq.n	800184c <receivePacket+0xb4>
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e015      	b.n	8001878 <receivePacket+0xe0>
		//parsing after receive
		result.command = buffer[1];
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	723b      	strb	r3, [r7, #8]
		result.data = buffer[3] & 0x7f;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	b29b      	uxth	r3, r3
 8001854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001858:	b29b      	uxth	r3, r3
 800185a:	817b      	strh	r3, [r7, #10]
		result.data |= (buffer[2] & 0x7f) << 7;
 800185c:	897b      	ldrh	r3, [r7, #10]
 800185e:	b21a      	sxth	r2, r3
 8001860:	78bb      	ldrb	r3, [r7, #2]
 8001862:	01db      	lsls	r3, r3, #7
 8001864:	b21b      	sxth	r3, r3
 8001866:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 800186a:	b21b      	sxth	r3, r3
 800186c:	4313      	orrs	r3, r2
 800186e:	b21b      	sxth	r3, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	817b      	strh	r3, [r7, #10]
	}
	return result;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60fb      	str	r3, [r7, #12]
}
 8001878:	2300      	movs	r3, #0
 800187a:	89ba      	ldrh	r2, [r7, #12]
 800187c:	f362 030f 	bfi	r3, r2, #0, #16
 8001880:	89fa      	ldrh	r2, [r7, #14]
 8001882:	f362 431f 	bfi	r3, r2, #16, #16
 8001886:	4618      	mov	r0, r3
 8001888:	3720      	adds	r7, #32
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001894:	f7ff feae 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189a:	490d      	ldr	r1, [pc, #52]	; (80018d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b0:	4c0a      	ldr	r4, [pc, #40]	; (80018dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018be:	f003 fc0d 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff faed 	bl	8000ea0 <main>
  bx  lr    
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018d4:	0800516c 	.word	0x0800516c
  ldr r2, =_sbss
 80018d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018dc:	2000026c 	.word	0x2000026c

080018e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <HAL_Init+0x40>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <HAL_Init+0x40>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_Init+0x40>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f92b 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	200f      	movs	r0, #15
 8001914:	f000 f808 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fd00 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f943 	bl	8001bd2 <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295
 8001964:	f000 f90b 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	; (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	20000268 	.word	0x20000268

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000268 	.word	0x20000268

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff29 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff3e 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff31 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bf8:	f7ff feda 	bl	80019b0 <HAL_GetTick>
 8001bfc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d008      	beq.n	8001c1c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2280      	movs	r2, #128	; 0x80
 8001c0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e052      	b.n	8001cc2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0216 	bic.w	r2, r2, #22
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c3a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d103      	bne.n	8001c4c <HAL_DMA_Abort+0x62>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d007      	beq.n	8001c5c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0208 	bic.w	r2, r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c6c:	e013      	b.n	8001c96 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c6e:	f7ff fe9f 	bl	80019b0 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b05      	cmp	r3, #5
 8001c7a:	d90c      	bls.n	8001c96 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2203      	movs	r2, #3
 8001c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e015      	b.n	8001cc2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1e4      	bne.n	8001c6e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca8:	223f      	movs	r2, #63	; 0x3f
 8001caa:	409a      	lsls	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d004      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e00c      	b.n	8001d02 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2205      	movs	r2, #5
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b089      	sub	sp, #36	; 0x24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e159      	b.n	8001fe0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	f040 8148 	bne.w	8001fda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d005      	beq.n	8001d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d130      	bne.n	8001dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	091b      	lsrs	r3, r3, #4
 8001dae:	f003 0201 	and.w	r2, r3, #1
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d017      	beq.n	8001e00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	2203      	movs	r2, #3
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d123      	bne.n	8001e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	08da      	lsrs	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3208      	adds	r2, #8
 8001e4e:	69b9      	ldr	r1, [r7, #24]
 8001e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0203 	and.w	r2, r3, #3
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80a2 	beq.w	8001fda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_GPIO_Init+0x2e8>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a56      	ldr	r2, [pc, #344]	; (8001ff8 <HAL_GPIO_Init+0x2e8>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b54      	ldr	r3, [pc, #336]	; (8001ff8 <HAL_GPIO_Init+0x2e8>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a52      	ldr	r2, [pc, #328]	; (8001ffc <HAL_GPIO_Init+0x2ec>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a49      	ldr	r2, [pc, #292]	; (8002000 <HAL_GPIO_Init+0x2f0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d019      	beq.n	8001f12 <HAL_GPIO_Init+0x202>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_GPIO_Init+0x2f4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d013      	beq.n	8001f0e <HAL_GPIO_Init+0x1fe>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a47      	ldr	r2, [pc, #284]	; (8002008 <HAL_GPIO_Init+0x2f8>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00d      	beq.n	8001f0a <HAL_GPIO_Init+0x1fa>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a46      	ldr	r2, [pc, #280]	; (800200c <HAL_GPIO_Init+0x2fc>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0x1f6>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a45      	ldr	r2, [pc, #276]	; (8002010 <HAL_GPIO_Init+0x300>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d101      	bne.n	8001f02 <HAL_GPIO_Init+0x1f2>
 8001efe:	2304      	movs	r3, #4
 8001f00:	e008      	b.n	8001f14 <HAL_GPIO_Init+0x204>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e006      	b.n	8001f14 <HAL_GPIO_Init+0x204>
 8001f06:	2303      	movs	r3, #3
 8001f08:	e004      	b.n	8001f14 <HAL_GPIO_Init+0x204>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e002      	b.n	8001f14 <HAL_GPIO_Init+0x204>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_GPIO_Init+0x204>
 8001f12:	2300      	movs	r3, #0
 8001f14:	69fa      	ldr	r2, [r7, #28]
 8001f16:	f002 0203 	and.w	r2, r2, #3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4093      	lsls	r3, r2
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f24:	4935      	ldr	r1, [pc, #212]	; (8001ffc <HAL_GPIO_Init+0x2ec>)
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	089b      	lsrs	r3, r3, #2
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f32:	4b38      	ldr	r3, [pc, #224]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f56:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f86:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001faa:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fd4:	4a0f      	ldr	r2, [pc, #60]	; (8002014 <HAL_GPIO_Init+0x304>)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b0f      	cmp	r3, #15
 8001fe4:	f67f aea2 	bls.w	8001d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40013800 	.word	0x40013800
 8002000:	40020000 	.word	0x40020000
 8002004:	40020400 	.word	0x40020400
 8002008:	40020800 	.word	0x40020800
 800200c:	40020c00 	.word	0x40020c00
 8002010:	40021000 	.word	0x40021000
 8002014:	40013c00 	.word	0x40013c00

08002018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002028:	787b      	ldrb	r3, [r7, #1]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002034:	e003      	b.n	800203e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	041a      	lsls	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
	...

0800204c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e267      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d075      	beq.n	8002156 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800206a:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x240>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b04      	cmp	r3, #4
 8002074:	d00c      	beq.n	8002090 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002076:	4b85      	ldr	r3, [pc, #532]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d112      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002082:	4b82      	ldr	r3, [pc, #520]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800208e:	d10b      	bne.n	80020a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d05b      	beq.n	8002154 <HAL_RCC_OscConfig+0x108>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d157      	bne.n	8002154 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e242      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_OscConfig+0x74>
 80020b2:	4b76      	ldr	r3, [pc, #472]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a75      	ldr	r2, [pc, #468]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e01d      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x98>
 80020ca:	4b70      	ldr	r3, [pc, #448]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6f      	ldr	r2, [pc, #444]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b6d      	ldr	r3, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a6c      	ldr	r2, [pc, #432]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e00b      	b.n	80020fc <HAL_RCC_OscConfig+0xb0>
 80020e4:	4b69      	ldr	r3, [pc, #420]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a68      	ldr	r2, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b66      	ldr	r3, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a65      	ldr	r2, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80020f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d013      	beq.n	800212c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fc54 	bl	80019b0 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800210c:	f7ff fc50 	bl	80019b0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e207      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800211e:	4b5b      	ldr	r3, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0xc0>
 800212a:	e014      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7ff fc40 	bl	80019b0 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002134:	f7ff fc3c 	bl	80019b0 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b64      	cmp	r3, #100	; 0x64
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e1f3      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0xe8>
 8002152:	e000      	b.n	8002156 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002154:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d063      	beq.n	800222a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002162:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002176:	2b08      	cmp	r3, #8
 8002178:	d11c      	bne.n	80021b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800217a:	4b44      	ldr	r3, [pc, #272]	; (800228c <HAL_RCC_OscConfig+0x240>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d116      	bne.n	80021b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_RCC_OscConfig+0x152>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d001      	beq.n	800219e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e1c7      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4937      	ldr	r1, [pc, #220]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b2:	e03a      	b.n	800222a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x244>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff fbf5 	bl	80019b0 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff fbf1 	bl	80019b0 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e1a8      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021dc:	4b2b      	ldr	r3, [pc, #172]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e8:	4b28      	ldr	r3, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4925      	ldr	r1, [pc, #148]	; (800228c <HAL_RCC_OscConfig+0x240>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	600b      	str	r3, [r1, #0]
 80021fc:	e015      	b.n	800222a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021fe:	4b24      	ldr	r3, [pc, #144]	; (8002290 <HAL_RCC_OscConfig+0x244>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff fbd4 	bl	80019b0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800220c:	f7ff fbd0 	bl	80019b0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e187      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	4b1b      	ldr	r3, [pc, #108]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d036      	beq.n	80022a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d016      	beq.n	800226c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_RCC_OscConfig+0x248>)
 8002240:	2201      	movs	r2, #1
 8002242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002244:	f7ff fbb4 	bl	80019b0 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800224c:	f7ff fbb0 	bl	80019b0 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e167      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800225e:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x240>)
 8002260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x200>
 800226a:	e01b      	b.n	80022a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_OscConfig+0x248>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002272:	f7ff fb9d 	bl	80019b0 <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	e00e      	b.n	8002298 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800227a:	f7ff fb99 	bl	80019b0 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d907      	bls.n	8002298 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e150      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
 800228c:	40023800 	.word	0x40023800
 8002290:	42470000 	.word	0x42470000
 8002294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	4b88      	ldr	r3, [pc, #544]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1ea      	bne.n	800227a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8097 	beq.w	80023e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b7d      	ldr	r3, [pc, #500]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	4a7c      	ldr	r2, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80022cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	4b7a      	ldr	r3, [pc, #488]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b77      	ldr	r3, [pc, #476]	; (80024c0 <HAL_RCC_OscConfig+0x474>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d118      	bne.n	8002320 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ee:	4b74      	ldr	r3, [pc, #464]	; (80024c0 <HAL_RCC_OscConfig+0x474>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a73      	ldr	r2, [pc, #460]	; (80024c0 <HAL_RCC_OscConfig+0x474>)
 80022f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022fa:	f7ff fb59 	bl	80019b0 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002302:	f7ff fb55 	bl	80019b0 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e10c      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_OscConfig+0x474>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d0f0      	beq.n	8002302 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x2ea>
 8002328:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800232a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6713      	str	r3, [r2, #112]	; 0x70
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x324>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b05      	cmp	r3, #5
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x30c>
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002342:	4a5e      	ldr	r2, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6713      	str	r3, [r2, #112]	; 0x70
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800234c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234e:	4a5b      	ldr	r2, [pc, #364]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6713      	str	r3, [r2, #112]	; 0x70
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0x324>
 8002358:	4b58      	ldr	r3, [pc, #352]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	4a57      	ldr	r2, [pc, #348]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6713      	str	r3, [r2, #112]	; 0x70
 8002364:	4b55      	ldr	r3, [pc, #340]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a54      	ldr	r2, [pc, #336]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 800236a:	f023 0304 	bic.w	r3, r3, #4
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d015      	beq.n	80023a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7ff fb1a 	bl	80019b0 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7ff fb16 	bl	80019b0 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	; 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0cb      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0ee      	beq.n	8002380 <HAL_RCC_OscConfig+0x334>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a4:	f7ff fb04 	bl	80019b0 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ac:	f7ff fb00 	bl	80019b0 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e0b5      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c2:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1ee      	bne.n	80023ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d4:	4b39      	ldr	r3, [pc, #228]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	4a38      	ldr	r2, [pc, #224]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80023da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 80a1 	beq.w	800252c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ea:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d05c      	beq.n	80024b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d141      	bne.n	8002482 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7ff fad4 	bl	80019b0 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff fad0 	bl	80019b0 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e087      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800241e:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69da      	ldr	r2, [r3, #28]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	019b      	lsls	r3, r3, #6
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	085b      	lsrs	r3, r3, #1
 8002442:	3b01      	subs	r3, #1
 8002444:	041b      	lsls	r3, r3, #16
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244c:	061b      	lsls	r3, r3, #24
 800244e:	491b      	ldr	r1, [pc, #108]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff faa9 	bl	80019b0 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002462:	f7ff faa5 	bl	80019b0 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e05c      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x416>
 8002480:	e054      	b.n	800252c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_RCC_OscConfig+0x478>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fa92 	bl	80019b0 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002490:	f7ff fa8e 	bl	80019b0 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e045      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_OscConfig+0x470>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x444>
 80024ae:	e03d      	b.n	800252c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d107      	bne.n	80024c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e038      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40007000 	.word	0x40007000
 80024c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024c8:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <HAL_RCC_OscConfig+0x4ec>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d028      	beq.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d121      	bne.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d11a      	bne.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024f8:	4013      	ands	r3, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002500:	4293      	cmp	r3, r2
 8002502:	d111      	bne.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	085b      	lsrs	r3, r3, #1
 8002510:	3b01      	subs	r3, #1
 8002512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d107      	bne.n	8002528 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800

0800253c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0cc      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002550:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	429a      	cmp	r2, r3
 800255c:	d90c      	bls.n	8002578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b63      	ldr	r3, [pc, #396]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d001      	beq.n	8002578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0b8      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d020      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002590:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a58      	ldr	r2, [pc, #352]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800259a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025a8:	4b53      	ldr	r3, [pc, #332]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	4a52      	ldr	r2, [pc, #328]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b4:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	494d      	ldr	r1, [pc, #308]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d044      	beq.n	800265c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d119      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e07f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d003      	beq.n	80025fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d107      	bne.n	800260a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	4b3f      	ldr	r3, [pc, #252]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d109      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e06f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e067      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800261a:	4b37      	ldr	r3, [pc, #220]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 0203 	bic.w	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	4934      	ldr	r1, [pc, #208]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800262c:	f7ff f9c0 	bl	80019b0 <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002632:	e00a      	b.n	800264a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002634:	f7ff f9bc 	bl	80019b0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e04f      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800264a:	4b2b      	ldr	r3, [pc, #172]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 020c 	and.w	r2, r3, #12
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	429a      	cmp	r2, r3
 800265a:	d1eb      	bne.n	8002634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800265c:	4b25      	ldr	r3, [pc, #148]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d20c      	bcs.n	8002684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002672:	4b20      	ldr	r3, [pc, #128]	; (80026f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0307 	and.w	r3, r3, #7
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d001      	beq.n	8002684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e032      	b.n	80026ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0304 	and.w	r3, r3, #4
 800268c:	2b00      	cmp	r3, #0
 800268e:	d008      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002690:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4916      	ldr	r1, [pc, #88]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	490e      	ldr	r1, [pc, #56]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c2:	f000 f821 	bl	8002708 <HAL_RCC_GetSysClockFreq>
 80026c6:	4602      	mov	r2, r0
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	490a      	ldr	r1, [pc, #40]	; (80026fc <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	5ccb      	ldrb	r3, [r1, r3]
 80026d6:	fa22 f303 	lsr.w	r3, r2, r3
 80026da:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_ClockConfig+0x1c8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f920 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023c00 	.word	0x40023c00
 80026f8:	40023800 	.word	0x40023800
 80026fc:	08005144 	.word	0x08005144
 8002700:	20000000 	.word	0x20000000
 8002704:	20000004 	.word	0x20000004

08002708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800270c:	b090      	sub	sp, #64	; 0x40
 800270e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	637b      	str	r3, [r7, #52]	; 0x34
 8002714:	2300      	movs	r3, #0
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002718:	2300      	movs	r3, #0
 800271a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800271c:	2300      	movs	r3, #0
 800271e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002720:	4b59      	ldr	r3, [pc, #356]	; (8002888 <HAL_RCC_GetSysClockFreq+0x180>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	2b08      	cmp	r3, #8
 800272a:	d00d      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x40>
 800272c:	2b08      	cmp	r3, #8
 800272e:	f200 80a1 	bhi.w	8002874 <HAL_RCC_GetSysClockFreq+0x16c>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x34>
 8002736:	2b04      	cmp	r3, #4
 8002738:	d003      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x3a>
 800273a:	e09b      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_GetSysClockFreq+0x184>)
 800273e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002740:	e09b      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002742:	4b53      	ldr	r3, [pc, #332]	; (8002890 <HAL_RCC_GetSysClockFreq+0x188>)
 8002744:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002746:	e098      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002748:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <HAL_RCC_GetSysClockFreq+0x180>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002750:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002752:	4b4d      	ldr	r3, [pc, #308]	; (8002888 <HAL_RCC_GetSysClockFreq+0x180>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d028      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <HAL_RCC_GetSysClockFreq+0x180>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	099b      	lsrs	r3, r3, #6
 8002764:	2200      	movs	r2, #0
 8002766:	623b      	str	r3, [r7, #32]
 8002768:	627a      	str	r2, [r7, #36]	; 0x24
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002770:	2100      	movs	r1, #0
 8002772:	4b47      	ldr	r3, [pc, #284]	; (8002890 <HAL_RCC_GetSysClockFreq+0x188>)
 8002774:	fb03 f201 	mul.w	r2, r3, r1
 8002778:	2300      	movs	r3, #0
 800277a:	fb00 f303 	mul.w	r3, r0, r3
 800277e:	4413      	add	r3, r2
 8002780:	4a43      	ldr	r2, [pc, #268]	; (8002890 <HAL_RCC_GetSysClockFreq+0x188>)
 8002782:	fba0 1202 	umull	r1, r2, r0, r2
 8002786:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002788:	460a      	mov	r2, r1
 800278a:	62ba      	str	r2, [r7, #40]	; 0x28
 800278c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278e:	4413      	add	r3, r2
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	2200      	movs	r2, #0
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	61fa      	str	r2, [r7, #28]
 800279a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800279e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80027a2:	f7fe f907 	bl	80009b4 <__aeabi_uldivmod>
 80027a6:	4602      	mov	r2, r0
 80027a8:	460b      	mov	r3, r1
 80027aa:	4613      	mov	r3, r2
 80027ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ae:	e053      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_RCC_GetSysClockFreq+0x180>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	2200      	movs	r2, #0
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	617a      	str	r2, [r7, #20]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027c2:	f04f 0b00 	mov.w	fp, #0
 80027c6:	4652      	mov	r2, sl
 80027c8:	465b      	mov	r3, fp
 80027ca:	f04f 0000 	mov.w	r0, #0
 80027ce:	f04f 0100 	mov.w	r1, #0
 80027d2:	0159      	lsls	r1, r3, #5
 80027d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d8:	0150      	lsls	r0, r2, #5
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	ebb2 080a 	subs.w	r8, r2, sl
 80027e2:	eb63 090b 	sbc.w	r9, r3, fp
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027fa:	ebb2 0408 	subs.w	r4, r2, r8
 80027fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	00eb      	lsls	r3, r5, #3
 800280c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002810:	00e2      	lsls	r2, r4, #3
 8002812:	4614      	mov	r4, r2
 8002814:	461d      	mov	r5, r3
 8002816:	eb14 030a 	adds.w	r3, r4, sl
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	eb45 030b 	adc.w	r3, r5, fp
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800282e:	4629      	mov	r1, r5
 8002830:	028b      	lsls	r3, r1, #10
 8002832:	4621      	mov	r1, r4
 8002834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002838:	4621      	mov	r1, r4
 800283a:	028a      	lsls	r2, r1, #10
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002842:	2200      	movs	r2, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	60fa      	str	r2, [r7, #12]
 8002848:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800284c:	f7fe f8b2 	bl	80009b4 <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002858:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <HAL_RCC_GetSysClockFreq+0x180>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	3301      	adds	r3, #1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002868:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetSysClockFreq+0x184>)
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800287c:	4618      	mov	r0, r3
 800287e:	3740      	adds	r7, #64	; 0x40
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400
 8002890:	017d7840 	.word	0x017d7840

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff0 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0a9b      	lsrs	r3, r3, #10
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08005154 	.word	0x08005154

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffdc 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0b5b      	lsrs	r3, r3, #13
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	08005154 	.word	0x08005154

080028fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e041      	b.n	8002992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe fd22 	bl	800136c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 fe88 	bl	8003650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d001      	beq.n	80029b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e03c      	b.n	8002a2e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_TIM_Base_Start+0xa0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d018      	beq.n	80029f8 <HAL_TIM_Base_Start+0x5c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d013      	beq.n	80029f8 <HAL_TIM_Base_Start+0x5c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <HAL_TIM_Base_Start+0xa4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00e      	beq.n	80029f8 <HAL_TIM_Base_Start+0x5c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_TIM_Base_Start+0xa8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_TIM_Base_Start+0x5c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_TIM_Base_Start+0xac>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIM_Base_Start+0x5c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_TIM_Base_Start+0xb0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d111      	bne.n	8002a1c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d010      	beq.n	8002a2c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1a:	e007      	b.n	8002a2c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800
 8002a48:	40000c00 	.word	0x40000c00
 8002a4c:	40014000 	.word	0x40014000

08002a50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e041      	b.n	8002ae6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d106      	bne.n	8002a7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f839 	bl	8002aee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4610      	mov	r0, r2
 8002a90:	f000 fdde 	bl	8003650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d109      	bne.n	8002b28 <HAL_TIM_PWM_Start+0x24>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	bf14      	ite	ne
 8002b20:	2301      	movne	r3, #1
 8002b22:	2300      	moveq	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e022      	b.n	8002b6e <HAL_TIM_PWM_Start+0x6a>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d109      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x3e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	bf14      	ite	ne
 8002b3a:	2301      	movne	r3, #1
 8002b3c:	2300      	moveq	r3, #0
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	e015      	b.n	8002b6e <HAL_TIM_PWM_Start+0x6a>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d109      	bne.n	8002b5c <HAL_TIM_PWM_Start+0x58>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	bf14      	ite	ne
 8002b54:	2301      	movne	r3, #1
 8002b56:	2300      	moveq	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e008      	b.n	8002b6e <HAL_TIM_PWM_Start+0x6a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	bf14      	ite	ne
 8002b68:	2301      	movne	r3, #1
 8002b6a:	2300      	moveq	r3, #0
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e068      	b.n	8002c48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d104      	bne.n	8002b86 <HAL_TIM_PWM_Start+0x82>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b84:	e013      	b.n	8002bae <HAL_TIM_PWM_Start+0xaa>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_PWM_Start+0x92>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b94:	e00b      	b.n	8002bae <HAL_TIM_PWM_Start+0xaa>
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d104      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0xa2>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ba4:	e003      	b.n	8002bae <HAL_TIM_PWM_Start+0xaa>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	6839      	ldr	r1, [r7, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 f91a 	bl	8003df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a23      	ldr	r2, [pc, #140]	; (8002c50 <HAL_TIM_PWM_Start+0x14c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d107      	bne.n	8002bd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <HAL_TIM_PWM_Start+0x14c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d018      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x10e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be8:	d013      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x10e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a19      	ldr	r2, [pc, #100]	; (8002c54 <HAL_TIM_PWM_Start+0x150>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00e      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x10e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_TIM_PWM_Start+0x154>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x10e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a16      	ldr	r2, [pc, #88]	; (8002c5c <HAL_TIM_PWM_Start+0x158>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x10e>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a14      	ldr	r2, [pc, #80]	; (8002c60 <HAL_TIM_PWM_Start+0x15c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d111      	bne.n	8002c36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b06      	cmp	r3, #6
 8002c22:	d010      	beq.n	8002c46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c34:	e007      	b.n	8002c46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40014000 	.word	0x40014000

08002c64 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e041      	b.n	8002cfa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f839 	bl	8002d02 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	f000 fcd4 	bl	8003650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d104      	bne.n	8002d36 <HAL_TIM_IC_Start_IT+0x1e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e013      	b.n	8002d5e <HAL_TIM_IC_Start_IT+0x46>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_IC_Start_IT+0x2e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	e00b      	b.n	8002d5e <HAL_TIM_IC_Start_IT+0x46>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_IC_Start_IT+0x3e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e003      	b.n	8002d5e <HAL_TIM_IC_Start_IT+0x46>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d104      	bne.n	8002d70 <HAL_TIM_IC_Start_IT+0x58>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	e013      	b.n	8002d98 <HAL_TIM_IC_Start_IT+0x80>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d104      	bne.n	8002d80 <HAL_TIM_IC_Start_IT+0x68>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	e00b      	b.n	8002d98 <HAL_TIM_IC_Start_IT+0x80>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d104      	bne.n	8002d90 <HAL_TIM_IC_Start_IT+0x78>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e003      	b.n	8002d98 <HAL_TIM_IC_Start_IT+0x80>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d9a:	7bbb      	ldrb	r3, [r7, #14]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002da0:	7b7b      	ldrb	r3, [r7, #13]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0c2      	b.n	8002f30 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d104      	bne.n	8002dba <HAL_TIM_IC_Start_IT+0xa2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db8:	e013      	b.n	8002de2 <HAL_TIM_IC_Start_IT+0xca>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_IC_Start_IT+0xb2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dc8:	e00b      	b.n	8002de2 <HAL_TIM_IC_Start_IT+0xca>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_IC_Start_IT+0xc2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dd8:	e003      	b.n	8002de2 <HAL_TIM_IC_Start_IT+0xca>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_IC_Start_IT+0xda>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df0:	e013      	b.n	8002e1a <HAL_TIM_IC_Start_IT+0x102>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_IC_Start_IT+0xea>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e00:	e00b      	b.n	8002e1a <HAL_TIM_IC_Start_IT+0x102>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_IC_Start_IT+0xfa>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e10:	e003      	b.n	8002e1a <HAL_TIM_IC_Start_IT+0x102>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d841      	bhi.n	8002ea4 <HAL_TIM_IC_Start_IT+0x18c>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <HAL_TIM_IC_Start_IT+0x110>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e5d 	.word	0x08002e5d
 8002e2c:	08002ea5 	.word	0x08002ea5
 8002e30:	08002ea5 	.word	0x08002ea5
 8002e34:	08002ea5 	.word	0x08002ea5
 8002e38:	08002e6f 	.word	0x08002e6f
 8002e3c:	08002ea5 	.word	0x08002ea5
 8002e40:	08002ea5 	.word	0x08002ea5
 8002e44:	08002ea5 	.word	0x08002ea5
 8002e48:	08002e81 	.word	0x08002e81
 8002e4c:	08002ea5 	.word	0x08002ea5
 8002e50:	08002ea5 	.word	0x08002ea5
 8002e54:	08002ea5 	.word	0x08002ea5
 8002e58:	08002e93 	.word	0x08002e93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0202 	orr.w	r2, r2, #2
 8002e6a:	60da      	str	r2, [r3, #12]
      break;
 8002e6c:	e01d      	b.n	8002eaa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f042 0204 	orr.w	r2, r2, #4
 8002e7c:	60da      	str	r2, [r3, #12]
      break;
 8002e7e:	e014      	b.n	8002eaa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0208 	orr.w	r2, r2, #8
 8002e8e:	60da      	str	r2, [r3, #12]
      break;
 8002e90:	e00b      	b.n	8002eaa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0210 	orr.w	r2, r2, #16
 8002ea0:	60da      	str	r2, [r3, #12]
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d13e      	bne.n	8002f2e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	6839      	ldr	r1, [r7, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f000 ff99 	bl	8003df0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_TIM_IC_Start_IT+0x220>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d018      	beq.n	8002efa <HAL_TIM_IC_Start_IT+0x1e2>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed0:	d013      	beq.n	8002efa <HAL_TIM_IC_Start_IT+0x1e2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_TIM_IC_Start_IT+0x224>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00e      	beq.n	8002efa <HAL_TIM_IC_Start_IT+0x1e2>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_TIM_IC_Start_IT+0x228>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d009      	beq.n	8002efa <HAL_TIM_IC_Start_IT+0x1e2>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <HAL_TIM_IC_Start_IT+0x22c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d004      	beq.n	8002efa <HAL_TIM_IC_Start_IT+0x1e2>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a14      	ldr	r2, [pc, #80]	; (8002f48 <HAL_TIM_IC_Start_IT+0x230>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d111      	bne.n	8002f1e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b06      	cmp	r3, #6
 8002f0a:	d010      	beq.n	8002f2e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f1c:	e007      	b.n	8002f2e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0201 	orr.w	r2, r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40000400 	.word	0x40000400
 8002f40:	40000800 	.word	0x40000800
 8002f44:	40000c00 	.word	0x40000c00
 8002f48:	40014000 	.word	0x40014000

08002f4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d020      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d01b      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f06f 0202 	mvn.w	r2, #2
 8002f80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fec2 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8002f9c:	e005      	b.n	8002faa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fb38 	bl	8003614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 fb3f 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d020      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0204 	mvn.w	r2, #4
 8002fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fd fe9c 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8002fe8:	e005      	b.n	8002ff6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fb12 	bl	8003614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fb19 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d020      	beq.n	8003048 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01b      	beq.n	8003048 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0208 	mvn.w	r2, #8
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2204      	movs	r2, #4
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f7fd fe76 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 faec 	bl	8003614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 faf3 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 0310 	and.w	r3, r3, #16
 800304e:	2b00      	cmp	r3, #0
 8003050:	d020      	beq.n	8003094 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f003 0310 	and.w	r3, r3, #16
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01b      	beq.n	8003094 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0210 	mvn.w	r2, #16
 8003064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2208      	movs	r2, #8
 800306a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd fe50 	bl	8000d20 <HAL_TIM_IC_CaptureCallback>
 8003080:	e005      	b.n	800308e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fac6 	bl	8003614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 facd 	bl	8003628 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00c      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f06f 0201 	mvn.w	r2, #1
 80030b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 faa4 	bl	8003600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00c      	beq.n	80030dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 ff7a 	bl	8003fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00c      	beq.n	8003100 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fa9e 	bl	800363c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0220 	mvn.w	r2, #32
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 ff4c 	bl	8003fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003146:	2302      	movs	r3, #2
 8003148:	e088      	b.n	800325c <HAL_TIM_IC_ConfigChannel+0x130>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d11b      	bne.n	8003190 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003168:	f000 fc8a 	bl	8003a80 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 020c 	bic.w	r2, r2, #12
 800317a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6999      	ldr	r1, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	619a      	str	r2, [r3, #24]
 800318e:	e060      	b.n	8003252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b04      	cmp	r3, #4
 8003194:	d11c      	bne.n	80031d0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80031a6:	f000 fd02 	bl	8003bae <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80031b8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6999      	ldr	r1, [r3, #24]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	021a      	lsls	r2, r3, #8
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	619a      	str	r2, [r3, #24]
 80031ce:	e040      	b.n	8003252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b08      	cmp	r3, #8
 80031d4:	d11b      	bne.n	800320e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031e6:	f000 fd4f 	bl	8003c88 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69da      	ldr	r2, [r3, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f022 020c 	bic.w	r2, r2, #12
 80031f8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69d9      	ldr	r1, [r3, #28]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	61da      	str	r2, [r3, #28]
 800320c:	e021      	b.n	8003252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	d11c      	bne.n	800324e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003224:	f000 fd6c 	bl	8003d00 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003236:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69d9      	ldr	r1, [r3, #28]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	021a      	lsls	r2, r3, #8
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	430a      	orrs	r2, r1
 800324a:	61da      	str	r2, [r3, #28]
 800324c:	e001      	b.n	8003252 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800325a:	7dfb      	ldrb	r3, [r7, #23]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800327e:	2302      	movs	r3, #2
 8003280:	e0ae      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b0c      	cmp	r3, #12
 800328e:	f200 809f 	bhi.w	80033d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003292:	a201      	add	r2, pc, #4	; (adr r2, 8003298 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080033d1 	.word	0x080033d1
 80032a0:	080033d1 	.word	0x080033d1
 80032a4:	080033d1 	.word	0x080033d1
 80032a8:	0800330d 	.word	0x0800330d
 80032ac:	080033d1 	.word	0x080033d1
 80032b0:	080033d1 	.word	0x080033d1
 80032b4:	080033d1 	.word	0x080033d1
 80032b8:	0800334f 	.word	0x0800334f
 80032bc:	080033d1 	.word	0x080033d1
 80032c0:	080033d1 	.word	0x080033d1
 80032c4:	080033d1 	.word	0x080033d1
 80032c8:	0800338f 	.word	0x0800338f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fa48 	bl	8003768 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0208 	orr.w	r2, r2, #8
 80032e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0204 	bic.w	r2, r2, #4
 80032f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6999      	ldr	r1, [r3, #24]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	619a      	str	r2, [r3, #24]
      break;
 800330a:	e064      	b.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fa8e 	bl	8003834 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6999      	ldr	r1, [r3, #24]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	619a      	str	r2, [r3, #24]
      break;
 800334c:	e043      	b.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fad9 	bl	800390c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0208 	orr.w	r2, r2, #8
 8003368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0204 	bic.w	r2, r2, #4
 8003378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69d9      	ldr	r1, [r3, #28]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	61da      	str	r2, [r3, #28]
      break;
 800338c:	e023      	b.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68b9      	ldr	r1, [r7, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f000 fb23 	bl	80039e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69d9      	ldr	r1, [r3, #28]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	021a      	lsls	r2, r3, #8
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	61da      	str	r2, [r3, #28]
      break;
 80033ce:	e002      	b.n	80033d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	75fb      	strb	r3, [r7, #23]
      break;
 80033d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033de:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_TIM_ConfigClockSource+0x1c>
 8003400:	2302      	movs	r3, #2
 8003402:	e0b4      	b.n	800356e <HAL_TIM_ConfigClockSource+0x186>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2202      	movs	r2, #2
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003422:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800342a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343c:	d03e      	beq.n	80034bc <HAL_TIM_ConfigClockSource+0xd4>
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	f200 8087 	bhi.w	8003554 <HAL_TIM_ConfigClockSource+0x16c>
 8003446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800344a:	f000 8086 	beq.w	800355a <HAL_TIM_ConfigClockSource+0x172>
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	d87f      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b70      	cmp	r3, #112	; 0x70
 8003456:	d01a      	beq.n	800348e <HAL_TIM_ConfigClockSource+0xa6>
 8003458:	2b70      	cmp	r3, #112	; 0x70
 800345a:	d87b      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b60      	cmp	r3, #96	; 0x60
 800345e:	d050      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x11a>
 8003460:	2b60      	cmp	r3, #96	; 0x60
 8003462:	d877      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b50      	cmp	r3, #80	; 0x50
 8003466:	d03c      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0xfa>
 8003468:	2b50      	cmp	r3, #80	; 0x50
 800346a:	d873      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d058      	beq.n	8003522 <HAL_TIM_ConfigClockSource+0x13a>
 8003470:	2b40      	cmp	r3, #64	; 0x40
 8003472:	d86f      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x16c>
 8003474:	2b30      	cmp	r3, #48	; 0x30
 8003476:	d064      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x15a>
 8003478:	2b30      	cmp	r3, #48	; 0x30
 800347a:	d86b      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x16c>
 800347c:	2b20      	cmp	r3, #32
 800347e:	d060      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x15a>
 8003480:	2b20      	cmp	r3, #32
 8003482:	d867      	bhi.n	8003554 <HAL_TIM_ConfigClockSource+0x16c>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05c      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x15a>
 8003488:	2b10      	cmp	r3, #16
 800348a:	d05a      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	e062      	b.n	8003554 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800349e:	f000 fc87 	bl	8003db0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	609a      	str	r2, [r3, #8]
      break;
 80034ba:	e04f      	b.n	800355c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034cc:	f000 fc70 	bl	8003db0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034de:	609a      	str	r2, [r3, #8]
      break;
 80034e0:	e03c      	b.n	800355c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	461a      	mov	r2, r3
 80034f0:	f000 fb2e 	bl	8003b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2150      	movs	r1, #80	; 0x50
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fc3d 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003500:	e02c      	b.n	800355c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800350e:	461a      	mov	r2, r3
 8003510:	f000 fb8a 	bl	8003c28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2160      	movs	r1, #96	; 0x60
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fc2d 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003520:	e01c      	b.n	800355c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	461a      	mov	r2, r3
 8003530:	f000 fb0e 	bl	8003b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2140      	movs	r1, #64	; 0x40
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fc1d 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003540:	e00c      	b.n	800355c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4619      	mov	r1, r3
 800354c:	4610      	mov	r0, r2
 800354e:	f000 fc14 	bl	8003d7a <TIM_ITRx_SetConfig>
      break;
 8003552:	e003      	b.n	800355c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      break;
 8003558:	e000      	b.n	800355c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800355a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800356c:	7bfb      	ldrb	r3, [r7, #15]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	2b0c      	cmp	r3, #12
 800358a:	d831      	bhi.n	80035f0 <HAL_TIM_ReadCapturedValue+0x78>
 800358c:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <HAL_TIM_ReadCapturedValue+0x1c>)
 800358e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003592:	bf00      	nop
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035f1 	.word	0x080035f1
 800359c:	080035f1 	.word	0x080035f1
 80035a0:	080035f1 	.word	0x080035f1
 80035a4:	080035d3 	.word	0x080035d3
 80035a8:	080035f1 	.word	0x080035f1
 80035ac:	080035f1 	.word	0x080035f1
 80035b0:	080035f1 	.word	0x080035f1
 80035b4:	080035dd 	.word	0x080035dd
 80035b8:	080035f1 	.word	0x080035f1
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	080035f1 	.word	0x080035f1
 80035c4:	080035e7 	.word	0x080035e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035ce:	60fb      	str	r3, [r7, #12]

      break;
 80035d0:	e00f      	b.n	80035f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d8:	60fb      	str	r3, [r7, #12]

      break;
 80035da:	e00a      	b.n	80035f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	60fb      	str	r3, [r7, #12]

      break;
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	60fb      	str	r3, [r7, #12]

      break;
 80035ee:	e000      	b.n	80035f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80035f0:	bf00      	nop
  }

  return tmpreg;
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a3a      	ldr	r2, [pc, #232]	; (800374c <TIM_Base_SetConfig+0xfc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00f      	beq.n	8003688 <TIM_Base_SetConfig+0x38>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366e:	d00b      	beq.n	8003688 <TIM_Base_SetConfig+0x38>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a37      	ldr	r2, [pc, #220]	; (8003750 <TIM_Base_SetConfig+0x100>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d007      	beq.n	8003688 <TIM_Base_SetConfig+0x38>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a36      	ldr	r2, [pc, #216]	; (8003754 <TIM_Base_SetConfig+0x104>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d003      	beq.n	8003688 <TIM_Base_SetConfig+0x38>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a35      	ldr	r2, [pc, #212]	; (8003758 <TIM_Base_SetConfig+0x108>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d108      	bne.n	800369a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a2b      	ldr	r2, [pc, #172]	; (800374c <TIM_Base_SetConfig+0xfc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01b      	beq.n	80036da <TIM_Base_SetConfig+0x8a>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d017      	beq.n	80036da <TIM_Base_SetConfig+0x8a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a28      	ldr	r2, [pc, #160]	; (8003750 <TIM_Base_SetConfig+0x100>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <TIM_Base_SetConfig+0x8a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a27      	ldr	r2, [pc, #156]	; (8003754 <TIM_Base_SetConfig+0x104>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00f      	beq.n	80036da <TIM_Base_SetConfig+0x8a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a26      	ldr	r2, [pc, #152]	; (8003758 <TIM_Base_SetConfig+0x108>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00b      	beq.n	80036da <TIM_Base_SetConfig+0x8a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a25      	ldr	r2, [pc, #148]	; (800375c <TIM_Base_SetConfig+0x10c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d007      	beq.n	80036da <TIM_Base_SetConfig+0x8a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a24      	ldr	r2, [pc, #144]	; (8003760 <TIM_Base_SetConfig+0x110>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d003      	beq.n	80036da <TIM_Base_SetConfig+0x8a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a23      	ldr	r2, [pc, #140]	; (8003764 <TIM_Base_SetConfig+0x114>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d108      	bne.n	80036ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a0e      	ldr	r2, [pc, #56]	; (800374c <TIM_Base_SetConfig+0xfc>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d103      	bne.n	8003720 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d105      	bne.n	800373e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	f023 0201 	bic.w	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	611a      	str	r2, [r3, #16]
  }
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40010000 	.word	0x40010000
 8003750:	40000400 	.word	0x40000400
 8003754:	40000800 	.word	0x40000800
 8003758:	40000c00 	.word	0x40000c00
 800375c:	40014000 	.word	0x40014000
 8003760:	40014400 	.word	0x40014400
 8003764:	40014800 	.word	0x40014800

08003768 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f023 0201 	bic.w	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 0303 	bic.w	r3, r3, #3
 800379e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	f023 0302 	bic.w	r3, r3, #2
 80037b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <TIM_OC1_SetConfig+0xc8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d10c      	bne.n	80037de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f023 0308 	bic.w	r3, r3, #8
 80037ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 0304 	bic.w	r3, r3, #4
 80037dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a13      	ldr	r2, [pc, #76]	; (8003830 <TIM_OC1_SetConfig+0xc8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d111      	bne.n	800380a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	621a      	str	r2, [r3, #32]
}
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40010000 	.word	0x40010000

08003834 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f023 0210 	bic.w	r2, r3, #16
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800386a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0320 	bic.w	r3, r3, #32
 800387e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a1e      	ldr	r2, [pc, #120]	; (8003908 <TIM_OC2_SetConfig+0xd4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d10d      	bne.n	80038b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a15      	ldr	r2, [pc, #84]	; (8003908 <TIM_OC2_SetConfig+0xd4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d113      	bne.n	80038e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40010000 	.word	0x40010000

0800390c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a1d      	ldr	r2, [pc, #116]	; (80039dc <TIM_OC3_SetConfig+0xd0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10d      	bne.n	8003986 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003970:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a14      	ldr	r2, [pc, #80]	; (80039dc <TIM_OC3_SetConfig+0xd0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d113      	bne.n	80039b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800399c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	621a      	str	r2, [r3, #32]
}
 80039d0:	bf00      	nop
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	40010000 	.word	0x40010000

080039e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	031b      	lsls	r3, r3, #12
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a10      	ldr	r2, [pc, #64]	; (8003a7c <TIM_OC4_SetConfig+0x9c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d109      	bne.n	8003a54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	621a      	str	r2, [r3, #32]
}
 8003a6e:	bf00      	nop
 8003a70:	371c      	adds	r7, #28
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40010000 	.word	0x40010000

08003a80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 0201 	bic.w	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a24      	ldr	r2, [pc, #144]	; (8003b3c <TIM_TI1_SetConfig+0xbc>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d013      	beq.n	8003ad6 <TIM_TI1_SetConfig+0x56>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d00f      	beq.n	8003ad6 <TIM_TI1_SetConfig+0x56>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a21      	ldr	r2, [pc, #132]	; (8003b40 <TIM_TI1_SetConfig+0xc0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_TI1_SetConfig+0x56>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <TIM_TI1_SetConfig+0xc4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <TIM_TI1_SetConfig+0x56>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4a1f      	ldr	r2, [pc, #124]	; (8003b48 <TIM_TI1_SetConfig+0xc8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_TI1_SetConfig+0x56>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4a1e      	ldr	r2, [pc, #120]	; (8003b4c <TIM_TI1_SetConfig+0xcc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <TIM_TI1_SetConfig+0x5a>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <TIM_TI1_SetConfig+0x5c>
 8003ada:	2300      	movs	r3, #0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e003      	b.n	8003afa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f023 030a 	bic.w	r3, r3, #10
 8003b14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 030a 	and.w	r3, r3, #10
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40014000 	.word	0x40014000

08003b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1b      	ldr	r3, [r3, #32]
 8003b66:	f023 0201 	bic.w	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 030a 	bic.w	r3, r3, #10
 8003b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b087      	sub	sp, #28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f023 0210 	bic.w	r2, r3, #16
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	031b      	lsls	r3, r3, #12
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	621a      	str	r2, [r3, #32]
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f023 0210 	bic.w	r2, r3, #16
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	031b      	lsls	r3, r3, #12
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	bf00      	nop
 8003c7e:	371c      	adds	r7, #28
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f023 0303 	bic.w	r3, r3, #3
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003cd8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	021b      	lsls	r3, r3, #8
 8003cde:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	621a      	str	r2, [r3, #32]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d3e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	031b      	lsls	r3, r3, #12
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003d52:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	031b      	lsls	r3, r3, #12
 8003d58:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	621a      	str	r2, [r3, #32]
}
 8003d6e:	bf00      	nop
 8003d70:	371c      	adds	r7, #28
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d92:	683a      	ldr	r2, [r7, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f043 0307 	orr.w	r3, r3, #7
 8003d9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	021a      	lsls	r2, r3, #8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f003 031f 	and.w	r3, r3, #31
 8003e02:	2201      	movs	r2, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a1a      	ldr	r2, [r3, #32]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	43db      	mvns	r3, r3
 8003e12:	401a      	ands	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1a      	ldr	r2, [r3, #32]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	fa01 f303 	lsl.w	r3, r1, r3
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e050      	b.n	8003ef6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a1c      	ldr	r2, [pc, #112]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d018      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea0:	d013      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00e      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d009      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	40010000 	.word	0x40010000
 8003f08:	40000400 	.word	0x40000400
 8003f0c:	40000800 	.word	0x40000800
 8003f10:	40000c00 	.word	0x40000c00
 8003f14:	40014000 	.word	0x40014000

08003f18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e03d      	b.n	8003fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e042      	b.n	800407c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fa64 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	; 0x24
 8004014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004026:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fddb 	bl	8004be4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800403c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800404c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800405c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2220      	movs	r2, #32
 8004068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	603b      	str	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d175      	bne.n	8004190 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d002      	beq.n	80040b0 <HAL_UART_Transmit+0x2c>
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e06e      	b.n	8004192 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2221      	movs	r2, #33	; 0x21
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c2:	f7fd fc75 	bl	80019b0 <HAL_GetTick>
 80040c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	88fa      	ldrh	r2, [r7, #6]
 80040cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d108      	bne.n	80040f0 <HAL_UART_Transmit+0x6c>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e003      	b.n	80040f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040f8:	e02e      	b.n	8004158 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	2200      	movs	r2, #0
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f000 fb3d 	bl	8004784 <UART_WaitOnFlagUntilTimeout>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e03a      	b.n	8004192 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004130:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	3302      	adds	r3, #2
 8004136:	61bb      	str	r3, [r7, #24]
 8004138:	e007      	b.n	800414a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	3301      	adds	r3, #1
 8004148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1cb      	bne.n	80040fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2200      	movs	r2, #0
 800416a:	2140      	movs	r1, #64	; 0x40
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fb09 	bl	8004784 <UART_WaitOnFlagUntilTimeout>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e006      	b.n	8004192 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	60f8      	str	r0, [r7, #12]
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	4613      	mov	r3, r2
 80041a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d112      	bne.n	80041da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d002      	beq.n	80041c0 <HAL_UART_Receive_IT+0x26>
 80041ba:	88fb      	ldrh	r3, [r7, #6]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e00b      	b.n	80041dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80041ca:	88fb      	ldrh	r3, [r7, #6]
 80041cc:	461a      	mov	r2, r3
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 fb30 	bl	8004836 <UART_Start_Receive_IT>
 80041d6:	4603      	mov	r3, r0
 80041d8:	e000      	b.n	80041dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80041da:	2302      	movs	r3, #2
  }
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b0ba      	sub	sp, #232	; 0xe8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004210:	2300      	movs	r3, #0
 8004212:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10f      	bne.n	800424a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_UART_IRQHandler+0x66>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fc10 	bl	8004a68 <UART_Receive_IT>
      return;
 8004248:	e25b      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800424a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80de 	beq.w	8004410 <HAL_UART_IRQHandler+0x22c>
 8004254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004264:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80d1 	beq.w	8004410 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800426e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00b      	beq.n	8004292 <HAL_UART_IRQHandler+0xae>
 800427a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f043 0201 	orr.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_UART_IRQHandler+0xd2>
 800429e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ae:	f043 0202 	orr.w	r2, r3, #2
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_UART_IRQHandler+0xf6>
 80042c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f043 0204 	orr.w	r2, r3, #4
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80042da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d011      	beq.n	800430a <HAL_UART_IRQHandler+0x126>
 80042e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80042f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f043 0208 	orr.w	r2, r3, #8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 81f2 	beq.w	80046f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_UART_IRQHandler+0x14e>
 8004320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004324:	f003 0320 	and.w	r3, r3, #32
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fb9b 	bl	8004a68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433c:	2b40      	cmp	r3, #64	; 0x40
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d103      	bne.n	800435e <HAL_UART_IRQHandler+0x17a>
 8004356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d04f      	beq.n	80043fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 faa3 	bl	80048aa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800436e:	2b40      	cmp	r3, #64	; 0x40
 8004370:	d141      	bne.n	80043f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800438c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	3314      	adds	r3, #20
 800439a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800439e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1d9      	bne.n	8004372 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d013      	beq.n	80043ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	4a7e      	ldr	r2, [pc, #504]	; (80045c4 <HAL_UART_IRQHandler+0x3e0>)
 80043cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd fc79 	bl	8001cca <HAL_DMA_Abort_IT>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043e8:	4610      	mov	r0, r2
 80043ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043ec:	e00e      	b.n	800440c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f994 	bl	800471c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f4:	e00a      	b.n	800440c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f990 	bl	800471c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043fc:	e006      	b.n	800440c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f98c 	bl	800471c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800440a:	e175      	b.n	80046f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	bf00      	nop
    return;
 800440e:	e173      	b.n	80046f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	2b01      	cmp	r3, #1
 8004416:	f040 814f 	bne.w	80046b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8148 	beq.w	80046b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 8141 	beq.w	80046b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	60bb      	str	r3, [r7, #8]
 800444a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004456:	2b40      	cmp	r3, #64	; 0x40
 8004458:	f040 80b6 	bne.w	80045c8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8145 	beq.w	80046fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800447a:	429a      	cmp	r2, r3
 800447c:	f080 813e 	bcs.w	80046fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004486:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004492:	f000 8088 	beq.w	80045a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	330c      	adds	r3, #12
 800449c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	330c      	adds	r3, #12
 80044be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80044c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044d2:	e841 2300 	strex	r3, r2, [r1]
 80044d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1d9      	bne.n	8004496 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80044f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f4:	f023 0301 	bic.w	r3, r3, #1
 80044f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004506:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800450a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800450e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e1      	bne.n	80044e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3314      	adds	r3, #20
 8004524:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800452e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004542:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004544:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004548:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e3      	bne.n	800451e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2220      	movs	r2, #32
 800455a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004576:	f023 0310 	bic.w	r3, r3, #16
 800457a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	330c      	adds	r3, #12
 8004584:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004588:	65ba      	str	r2, [r7, #88]	; 0x58
 800458a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800458e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004590:	e841 2300 	strex	r3, r2, [r1]
 8004594:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1e3      	bne.n	8004564 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fd fb22 	bl	8001bea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2202      	movs	r2, #2
 80045aa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8b7 	bl	8004730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045c2:	e09b      	b.n	80046fc <HAL_UART_IRQHandler+0x518>
 80045c4:	08004971 	.word	0x08004971
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 808e 	beq.w	8004700 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80045e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 8089 	beq.w	8004700 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	330c      	adds	r3, #12
 80045f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004604:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004612:	647a      	str	r2, [r7, #68]	; 0x44
 8004614:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004618:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e3      	bne.n	80045ee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	623b      	str	r3, [r7, #32]
   return(result);
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3314      	adds	r3, #20
 8004646:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800464a:	633a      	str	r2, [r7, #48]	; 0x30
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e3      	bne.n	8004626 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	330c      	adds	r3, #12
 8004672:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	60fb      	str	r3, [r7, #12]
   return(result);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0310 	bic.w	r3, r3, #16
 8004682:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004690:	61fa      	str	r2, [r7, #28]
 8004692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	69b9      	ldr	r1, [r7, #24]
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	617b      	str	r3, [r7, #20]
   return(result);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e3      	bne.n	800466c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f83d 	bl	8004730 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046b6:	e023      	b.n	8004700 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <HAL_UART_IRQHandler+0x4f4>
 80046c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f961 	bl	8004998 <UART_Transmit_IT>
    return;
 80046d6:	e014      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00e      	beq.n	8004702 <HAL_UART_IRQHandler+0x51e>
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f9a1 	bl	8004a38 <UART_EndTransmit_IT>
    return;
 80046f6:	e004      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
    return;
 80046f8:	bf00      	nop
 80046fa:	e002      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
      return;
 80046fc:	bf00      	nop
 80046fe:	e000      	b.n	8004702 <HAL_UART_IRQHandler+0x51e>
      return;
 8004700:	bf00      	nop
  }
}
 8004702:	37e8      	adds	r7, #232	; 0xe8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	2300      	movs	r3, #0
 8004756:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475e:	b2db      	uxtb	r3, r3
 8004760:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004768:	b2db      	uxtb	r3, r3
 800476a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	b2da      	uxtb	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	4313      	orrs	r3, r2
 8004776:	b2db      	uxtb	r3, r3
}
 8004778:	4618      	mov	r0, r3
 800477a:	3714      	adds	r7, #20
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	603b      	str	r3, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004794:	e03b      	b.n	800480e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d037      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479e:	f7fd f907 	bl	80019b0 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	6a3a      	ldr	r2, [r7, #32]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d302      	bcc.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e03a      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d023      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0x8a>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b80      	cmp	r3, #128	; 0x80
 80047ca:	d020      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0x8a>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d01d      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b08      	cmp	r3, #8
 80047de:	d116      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f857 	bl	80048aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2208      	movs	r2, #8
 8004800:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e00f      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4013      	ands	r3, r2
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	429a      	cmp	r2, r3
 800482a:	d0b4      	beq.n	8004796 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3718      	adds	r7, #24
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	88fa      	ldrh	r2, [r7, #6]
 8004854:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2222      	movs	r2, #34	; 0x22
 8004860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d007      	beq.n	800487c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800487a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0220 	orr.w	r2, r2, #32
 800489a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b095      	sub	sp, #84	; 0x54
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	e853 3f00 	ldrex	r3, [r3]
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	330c      	adds	r3, #12
 80048d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048d2:	643a      	str	r2, [r7, #64]	; 0x40
 80048d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048da:	e841 2300 	strex	r3, r2, [r1]
 80048de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1e5      	bne.n	80048b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	3314      	adds	r3, #20
 80048ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3314      	adds	r3, #20
 8004904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e5      	bne.n	80048e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491e:	2b01      	cmp	r3, #1
 8004920:	d119      	bne.n	8004956 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	60bb      	str	r3, [r7, #8]
   return(result);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f023 0310 	bic.w	r3, r3, #16
 8004938:	647b      	str	r3, [r7, #68]	; 0x44
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004942:	61ba      	str	r2, [r7, #24]
 8004944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6979      	ldr	r1, [r7, #20]
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	613b      	str	r3, [r7, #16]
   return(result);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004964:	bf00      	nop
 8004966:	3754      	adds	r7, #84	; 0x54
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f7ff fec6 	bl	800471c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004990:	bf00      	nop
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b21      	cmp	r3, #33	; 0x21
 80049aa:	d13e      	bne.n	8004a2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b4:	d114      	bne.n	80049e0 <UART_Transmit_IT+0x48>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d110      	bne.n	80049e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	1c9a      	adds	r2, r3, #2
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	621a      	str	r2, [r3, #32]
 80049de:	e008      	b.n	80049f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	1c59      	adds	r1, r3, #1
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6211      	str	r1, [r2, #32]
 80049ea:	781a      	ldrb	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	4619      	mov	r1, r3
 8004a00:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10f      	bne.n	8004a26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a2a:	2302      	movs	r3, #2
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff fe55 	bl	8004708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	; 0x30
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b22      	cmp	r3, #34	; 0x22
 8004a7a:	f040 80ae 	bne.w	8004bda <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a86:	d117      	bne.n	8004ab8 <UART_Receive_IT+0x50>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d113      	bne.n	8004ab8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	1c9a      	adds	r2, r3, #2
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	629a      	str	r2, [r3, #40]	; 0x28
 8004ab6:	e026      	b.n	8004b06 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aca:	d007      	beq.n	8004adc <UART_Receive_IT+0x74>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <UART_Receive_IT+0x82>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d106      	bne.n	8004aea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e008      	b.n	8004afc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	1c5a      	adds	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	4619      	mov	r1, r3
 8004b14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d15d      	bne.n	8004bd6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68da      	ldr	r2, [r3, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0220 	bic.w	r2, r2, #32
 8004b28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d135      	bne.n	8004bcc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	613b      	str	r3, [r7, #16]
   return(result);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	f023 0310 	bic.w	r3, r3, #16
 8004b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b86:	623a      	str	r2, [r7, #32]
 8004b88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	69f9      	ldr	r1, [r7, #28]
 8004b8c:	6a3a      	ldr	r2, [r7, #32]
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e5      	bne.n	8004b66 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d10a      	bne.n	8004bbe <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7ff fdb3 	bl	8004730 <HAL_UARTEx_RxEventCallback>
 8004bca:	e002      	b.n	8004bd2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fc fd39 	bl	8001644 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e002      	b.n	8004bdc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3730      	adds	r7, #48	; 0x30
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be8:	b0c0      	sub	sp, #256	; 0x100
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c00:	68d9      	ldr	r1, [r3, #12]
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	ea40 0301 	orr.w	r3, r0, r1
 8004c0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c3c:	f021 010c 	bic.w	r1, r1, #12
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c5e:	6999      	ldr	r1, [r3, #24]
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	ea40 0301 	orr.w	r3, r0, r1
 8004c6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	4b8f      	ldr	r3, [pc, #572]	; (8004eb0 <UART_SetConfig+0x2cc>)
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d005      	beq.n	8004c84 <UART_SetConfig+0xa0>
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b8d      	ldr	r3, [pc, #564]	; (8004eb4 <UART_SetConfig+0x2d0>)
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d104      	bne.n	8004c8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c84:	f7fd fe26 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8004c88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c8c:	e003      	b.n	8004c96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c8e:	f7fd fe0d 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8004c92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca0:	f040 810c 	bne.w	8004ebc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ca4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cb2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	1891      	adds	r1, r2, r2
 8004cbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cbe:	415b      	adcs	r3, r3
 8004cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	eb12 0801 	adds.w	r8, r2, r1
 8004ccc:	4629      	mov	r1, r5
 8004cce:	eb43 0901 	adc.w	r9, r3, r1
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ce2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	4699      	mov	r9, r3
 8004cea:	4623      	mov	r3, r4
 8004cec:	eb18 0303 	adds.w	r3, r8, r3
 8004cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cf4:	462b      	mov	r3, r5
 8004cf6:	eb49 0303 	adc.w	r3, r9, r3
 8004cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d12:	460b      	mov	r3, r1
 8004d14:	18db      	adds	r3, r3, r3
 8004d16:	653b      	str	r3, [r7, #80]	; 0x50
 8004d18:	4613      	mov	r3, r2
 8004d1a:	eb42 0303 	adc.w	r3, r2, r3
 8004d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8004d20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d28:	f7fb fe44 	bl	80009b4 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4b61      	ldr	r3, [pc, #388]	; (8004eb8 <UART_SetConfig+0x2d4>)
 8004d32:	fba3 2302 	umull	r2, r3, r3, r2
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	011c      	lsls	r4, r3, #4
 8004d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d4c:	4642      	mov	r2, r8
 8004d4e:	464b      	mov	r3, r9
 8004d50:	1891      	adds	r1, r2, r2
 8004d52:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d54:	415b      	adcs	r3, r3
 8004d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d5c:	4641      	mov	r1, r8
 8004d5e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d62:	4649      	mov	r1, r9
 8004d64:	eb43 0b01 	adc.w	fp, r3, r1
 8004d68:	f04f 0200 	mov.w	r2, #0
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d7c:	4692      	mov	sl, r2
 8004d7e:	469b      	mov	fp, r3
 8004d80:	4643      	mov	r3, r8
 8004d82:	eb1a 0303 	adds.w	r3, sl, r3
 8004d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d8a:	464b      	mov	r3, r9
 8004d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004da0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004da4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004da8:	460b      	mov	r3, r1
 8004daa:	18db      	adds	r3, r3, r3
 8004dac:	643b      	str	r3, [r7, #64]	; 0x40
 8004dae:	4613      	mov	r3, r2
 8004db0:	eb42 0303 	adc.w	r3, r2, r3
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
 8004db6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dbe:	f7fb fdf9 	bl	80009b4 <__aeabi_uldivmod>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <UART_SetConfig+0x2d4>)
 8004dca:	fba3 2301 	umull	r2, r3, r3, r1
 8004dce:	095b      	lsrs	r3, r3, #5
 8004dd0:	2264      	movs	r2, #100	; 0x64
 8004dd2:	fb02 f303 	mul.w	r3, r2, r3
 8004dd6:	1acb      	subs	r3, r1, r3
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004dde:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <UART_SetConfig+0x2d4>)
 8004de0:	fba3 2302 	umull	r2, r3, r3, r2
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004dec:	441c      	add	r4, r3
 8004dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004df8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004dfc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	1891      	adds	r1, r2, r2
 8004e06:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e08:	415b      	adcs	r3, r3
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e10:	4641      	mov	r1, r8
 8004e12:	1851      	adds	r1, r2, r1
 8004e14:	6339      	str	r1, [r7, #48]	; 0x30
 8004e16:	4649      	mov	r1, r9
 8004e18:	414b      	adcs	r3, r1
 8004e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1c:	f04f 0200 	mov.w	r2, #0
 8004e20:	f04f 0300 	mov.w	r3, #0
 8004e24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e28:	4659      	mov	r1, fp
 8004e2a:	00cb      	lsls	r3, r1, #3
 8004e2c:	4651      	mov	r1, sl
 8004e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e32:	4651      	mov	r1, sl
 8004e34:	00ca      	lsls	r2, r1, #3
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	4642      	mov	r2, r8
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e44:	464b      	mov	r3, r9
 8004e46:	460a      	mov	r2, r1
 8004e48:	eb42 0303 	adc.w	r3, r2, r3
 8004e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e64:	460b      	mov	r3, r1
 8004e66:	18db      	adds	r3, r3, r3
 8004e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	eb42 0303 	adc.w	r3, r2, r3
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e7a:	f7fb fd9b 	bl	80009b4 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4b0d      	ldr	r3, [pc, #52]	; (8004eb8 <UART_SetConfig+0x2d4>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	2164      	movs	r1, #100	; 0x64
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	3332      	adds	r3, #50	; 0x32
 8004e96:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <UART_SetConfig+0x2d4>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 0207 	and.w	r2, r3, #7
 8004ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4422      	add	r2, r4
 8004eaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eac:	e106      	b.n	80050bc <UART_SetConfig+0x4d8>
 8004eae:	bf00      	nop
 8004eb0:	40011000 	.word	0x40011000
 8004eb4:	40011400 	.word	0x40011400
 8004eb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ebc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ec6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004eca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ece:	4642      	mov	r2, r8
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	1891      	adds	r1, r2, r2
 8004ed4:	6239      	str	r1, [r7, #32]
 8004ed6:	415b      	adcs	r3, r3
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ede:	4641      	mov	r1, r8
 8004ee0:	1854      	adds	r4, r2, r1
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	eb43 0501 	adc.w	r5, r3, r1
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	00eb      	lsls	r3, r5, #3
 8004ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef6:	00e2      	lsls	r2, r4, #3
 8004ef8:	4614      	mov	r4, r2
 8004efa:	461d      	mov	r5, r3
 8004efc:	4643      	mov	r3, r8
 8004efe:	18e3      	adds	r3, r4, r3
 8004f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f04:	464b      	mov	r3, r9
 8004f06:	eb45 0303 	adc.w	r3, r5, r3
 8004f0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	008b      	lsls	r3, r1, #2
 8004f2e:	4621      	mov	r1, r4
 8004f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f34:	4621      	mov	r1, r4
 8004f36:	008a      	lsls	r2, r1, #2
 8004f38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f3c:	f7fb fd3a 	bl	80009b4 <__aeabi_uldivmod>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	4b60      	ldr	r3, [pc, #384]	; (80050c8 <UART_SetConfig+0x4e4>)
 8004f46:	fba3 2302 	umull	r2, r3, r3, r2
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	011c      	lsls	r4, r3, #4
 8004f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f60:	4642      	mov	r2, r8
 8004f62:	464b      	mov	r3, r9
 8004f64:	1891      	adds	r1, r2, r2
 8004f66:	61b9      	str	r1, [r7, #24]
 8004f68:	415b      	adcs	r3, r3
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f70:	4641      	mov	r1, r8
 8004f72:	1851      	adds	r1, r2, r1
 8004f74:	6139      	str	r1, [r7, #16]
 8004f76:	4649      	mov	r1, r9
 8004f78:	414b      	adcs	r3, r1
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	f04f 0200 	mov.w	r2, #0
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f88:	4659      	mov	r1, fp
 8004f8a:	00cb      	lsls	r3, r1, #3
 8004f8c:	4651      	mov	r1, sl
 8004f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f92:	4651      	mov	r1, sl
 8004f94:	00ca      	lsls	r2, r1, #3
 8004f96:	4610      	mov	r0, r2
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	460a      	mov	r2, r1
 8004fa8:	eb42 0303 	adc.w	r3, r2, r3
 8004fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fba:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004fc8:	4649      	mov	r1, r9
 8004fca:	008b      	lsls	r3, r1, #2
 8004fcc:	4641      	mov	r1, r8
 8004fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	008a      	lsls	r2, r1, #2
 8004fd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fda:	f7fb fceb 	bl	80009b4 <__aeabi_uldivmod>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4b38      	ldr	r3, [pc, #224]	; (80050c8 <UART_SetConfig+0x4e4>)
 8004fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	2264      	movs	r2, #100	; 0x64
 8004fee:	fb02 f303 	mul.w	r3, r2, r3
 8004ff2:	1acb      	subs	r3, r1, r3
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	3332      	adds	r3, #50	; 0x32
 8004ff8:	4a33      	ldr	r2, [pc, #204]	; (80050c8 <UART_SetConfig+0x4e4>)
 8004ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005004:	441c      	add	r4, r3
 8005006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800500a:	2200      	movs	r2, #0
 800500c:	673b      	str	r3, [r7, #112]	; 0x70
 800500e:	677a      	str	r2, [r7, #116]	; 0x74
 8005010:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005014:	4642      	mov	r2, r8
 8005016:	464b      	mov	r3, r9
 8005018:	1891      	adds	r1, r2, r2
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	415b      	adcs	r3, r3
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005024:	4641      	mov	r1, r8
 8005026:	1851      	adds	r1, r2, r1
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	4649      	mov	r1, r9
 800502c:	414b      	adcs	r3, r1
 800502e:	607b      	str	r3, [r7, #4]
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800503c:	4659      	mov	r1, fp
 800503e:	00cb      	lsls	r3, r1, #3
 8005040:	4651      	mov	r1, sl
 8005042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005046:	4651      	mov	r1, sl
 8005048:	00ca      	lsls	r2, r1, #3
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	4603      	mov	r3, r0
 8005050:	4642      	mov	r2, r8
 8005052:	189b      	adds	r3, r3, r2
 8005054:	66bb      	str	r3, [r7, #104]	; 0x68
 8005056:	464b      	mov	r3, r9
 8005058:	460a      	mov	r2, r1
 800505a:	eb42 0303 	adc.w	r3, r2, r3
 800505e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	663b      	str	r3, [r7, #96]	; 0x60
 800506a:	667a      	str	r2, [r7, #100]	; 0x64
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005078:	4649      	mov	r1, r9
 800507a:	008b      	lsls	r3, r1, #2
 800507c:	4641      	mov	r1, r8
 800507e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005082:	4641      	mov	r1, r8
 8005084:	008a      	lsls	r2, r1, #2
 8005086:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800508a:	f7fb fc93 	bl	80009b4 <__aeabi_uldivmod>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4b0d      	ldr	r3, [pc, #52]	; (80050c8 <UART_SetConfig+0x4e4>)
 8005094:	fba3 1302 	umull	r1, r3, r3, r2
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	2164      	movs	r1, #100	; 0x64
 800509c:	fb01 f303 	mul.w	r3, r1, r3
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	3332      	adds	r3, #50	; 0x32
 80050a6:	4a08      	ldr	r2, [pc, #32]	; (80050c8 <UART_SetConfig+0x4e4>)
 80050a8:	fba2 2303 	umull	r2, r3, r2, r3
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	f003 020f 	and.w	r2, r3, #15
 80050b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4422      	add	r2, r4
 80050ba:	609a      	str	r2, [r3, #8]
}
 80050bc:	bf00      	nop
 80050be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050c2:	46bd      	mov	sp, r7
 80050c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c8:	51eb851f 	.word	0x51eb851f

080050cc <memset>:
 80050cc:	4402      	add	r2, r0
 80050ce:	4603      	mov	r3, r0
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d100      	bne.n	80050d6 <memset+0xa>
 80050d4:	4770      	bx	lr
 80050d6:	f803 1b01 	strb.w	r1, [r3], #1
 80050da:	e7f9      	b.n	80050d0 <memset+0x4>

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	4d0d      	ldr	r5, [pc, #52]	; (8005114 <__libc_init_array+0x38>)
 80050e0:	4c0d      	ldr	r4, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e2:	1b64      	subs	r4, r4, r5
 80050e4:	10a4      	asrs	r4, r4, #2
 80050e6:	2600      	movs	r6, #0
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	4d0b      	ldr	r5, [pc, #44]	; (800511c <__libc_init_array+0x40>)
 80050ee:	4c0c      	ldr	r4, [pc, #48]	; (8005120 <__libc_init_array+0x44>)
 80050f0:	f000 f818 	bl	8005124 <_init>
 80050f4:	1b64      	subs	r4, r4, r5
 80050f6:	10a4      	asrs	r4, r4, #2
 80050f8:	2600      	movs	r6, #0
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	f855 3b04 	ldr.w	r3, [r5], #4
 8005104:	4798      	blx	r3
 8005106:	3601      	adds	r6, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	f855 3b04 	ldr.w	r3, [r5], #4
 800510e:	4798      	blx	r3
 8005110:	3601      	adds	r6, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	08005164 	.word	0x08005164
 8005118:	08005164 	.word	0x08005164
 800511c:	08005164 	.word	0x08005164
 8005120:	08005168 	.word	0x08005168

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
